// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PanelJoin is an object representing the database table.
type PanelJoin struct {
	PositiveID string `boil:"positive_id" json:"positive_id" toml:"positive_id" yaml:"positive_id"`
	NegativeID string `boil:"negative_id" json:"negative_id" toml:"negative_id" yaml:"negative_id"`
	ID         string `boil:"id" json:"id" toml:"id" yaml:"id"`
	ProjectID  int64  `boil:"project_id" json:"project_id" toml:"project_id" yaml:"project_id"`

	R *panelJoinR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L panelJoinL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PanelJoinColumns = struct {
	PositiveID string
	NegativeID string
	ID         string
	ProjectID  string
}{
	PositiveID: "positive_id",
	NegativeID: "negative_id",
	ID:         "id",
	ProjectID:  "project_id",
}

var PanelJoinTableColumns = struct {
	PositiveID string
	NegativeID string
	ID         string
	ProjectID  string
}{
	PositiveID: "panel_joins.positive_id",
	NegativeID: "panel_joins.negative_id",
	ID:         "panel_joins.id",
	ProjectID:  "panel_joins.project_id",
}

// Generated where

var PanelJoinWhere = struct {
	PositiveID whereHelperstring
	NegativeID whereHelperstring
	ID         whereHelperstring
	ProjectID  whereHelperint64
}{
	PositiveID: whereHelperstring{field: "\"panel_joins\".\"positive_id\""},
	NegativeID: whereHelperstring{field: "\"panel_joins\".\"negative_id\""},
	ID:         whereHelperstring{field: "\"panel_joins\".\"id\""},
	ProjectID:  whereHelperint64{field: "\"panel_joins\".\"project_id\""},
}

// PanelJoinRels is where relationship names are stored.
var PanelJoinRels = struct {
	Project  string
	Negative string
	Positive string
}{
	Project:  "Project",
	Negative: "Negative",
	Positive: "Positive",
}

// panelJoinR is where relationships are stored.
type panelJoinR struct {
	Project  *Project `boil:"Project" json:"Project" toml:"Project" yaml:"Project"`
	Negative *Panel   `boil:"Negative" json:"Negative" toml:"Negative" yaml:"Negative"`
	Positive *Panel   `boil:"Positive" json:"Positive" toml:"Positive" yaml:"Positive"`
}

// NewStruct creates a new relationship struct
func (*panelJoinR) NewStruct() *panelJoinR {
	return &panelJoinR{}
}

func (r *panelJoinR) GetProject() *Project {
	if r == nil {
		return nil
	}
	return r.Project
}

func (r *panelJoinR) GetNegative() *Panel {
	if r == nil {
		return nil
	}
	return r.Negative
}

func (r *panelJoinR) GetPositive() *Panel {
	if r == nil {
		return nil
	}
	return r.Positive
}

// panelJoinL is where Load methods for each relationship are stored.
type panelJoinL struct{}

var (
	panelJoinAllColumns            = []string{"positive_id", "negative_id", "id", "project_id"}
	panelJoinColumnsWithoutDefault = []string{"positive_id", "negative_id", "project_id"}
	panelJoinColumnsWithDefault    = []string{"id"}
	panelJoinPrimaryKeyColumns     = []string{"positive_id", "negative_id"}
	panelJoinGeneratedColumns      = []string{}
)

type (
	// PanelJoinSlice is an alias for a slice of pointers to PanelJoin.
	// This should almost always be used instead of []PanelJoin.
	PanelJoinSlice []*PanelJoin
	// PanelJoinHook is the signature for custom PanelJoin hook methods
	PanelJoinHook func(context.Context, boil.ContextExecutor, *PanelJoin) error

	panelJoinQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	panelJoinType                 = reflect.TypeOf(&PanelJoin{})
	panelJoinMapping              = queries.MakeStructMapping(panelJoinType)
	panelJoinPrimaryKeyMapping, _ = queries.BindMapping(panelJoinType, panelJoinMapping, panelJoinPrimaryKeyColumns)
	panelJoinInsertCacheMut       sync.RWMutex
	panelJoinInsertCache          = make(map[string]insertCache)
	panelJoinUpdateCacheMut       sync.RWMutex
	panelJoinUpdateCache          = make(map[string]updateCache)
	panelJoinUpsertCacheMut       sync.RWMutex
	panelJoinUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var panelJoinAfterSelectHooks []PanelJoinHook

var panelJoinBeforeInsertHooks []PanelJoinHook
var panelJoinAfterInsertHooks []PanelJoinHook

var panelJoinBeforeUpdateHooks []PanelJoinHook
var panelJoinAfterUpdateHooks []PanelJoinHook

var panelJoinBeforeDeleteHooks []PanelJoinHook
var panelJoinAfterDeleteHooks []PanelJoinHook

var panelJoinBeforeUpsertHooks []PanelJoinHook
var panelJoinAfterUpsertHooks []PanelJoinHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PanelJoin) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range panelJoinAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PanelJoin) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range panelJoinBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PanelJoin) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range panelJoinAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PanelJoin) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range panelJoinBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PanelJoin) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range panelJoinAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PanelJoin) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range panelJoinBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PanelJoin) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range panelJoinAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PanelJoin) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range panelJoinBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PanelJoin) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range panelJoinAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPanelJoinHook registers your hook function for all future operations.
func AddPanelJoinHook(hookPoint boil.HookPoint, panelJoinHook PanelJoinHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		panelJoinAfterSelectHooks = append(panelJoinAfterSelectHooks, panelJoinHook)
	case boil.BeforeInsertHook:
		panelJoinBeforeInsertHooks = append(panelJoinBeforeInsertHooks, panelJoinHook)
	case boil.AfterInsertHook:
		panelJoinAfterInsertHooks = append(panelJoinAfterInsertHooks, panelJoinHook)
	case boil.BeforeUpdateHook:
		panelJoinBeforeUpdateHooks = append(panelJoinBeforeUpdateHooks, panelJoinHook)
	case boil.AfterUpdateHook:
		panelJoinAfterUpdateHooks = append(panelJoinAfterUpdateHooks, panelJoinHook)
	case boil.BeforeDeleteHook:
		panelJoinBeforeDeleteHooks = append(panelJoinBeforeDeleteHooks, panelJoinHook)
	case boil.AfterDeleteHook:
		panelJoinAfterDeleteHooks = append(panelJoinAfterDeleteHooks, panelJoinHook)
	case boil.BeforeUpsertHook:
		panelJoinBeforeUpsertHooks = append(panelJoinBeforeUpsertHooks, panelJoinHook)
	case boil.AfterUpsertHook:
		panelJoinAfterUpsertHooks = append(panelJoinAfterUpsertHooks, panelJoinHook)
	}
}

// One returns a single panelJoin record from the query.
func (q panelJoinQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PanelJoin, error) {
	o := &PanelJoin{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for panel_joins")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PanelJoin records from the query.
func (q panelJoinQuery) All(ctx context.Context, exec boil.ContextExecutor) (PanelJoinSlice, error) {
	var o []*PanelJoin

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PanelJoin slice")
	}

	if len(panelJoinAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PanelJoin records in the query.
func (q panelJoinQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count panel_joins rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q panelJoinQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if panel_joins exists")
	}

	return count > 0, nil
}

// Project pointed to by the foreign key.
func (o *PanelJoin) Project(mods ...qm.QueryMod) projectQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProjectID),
	}

	queryMods = append(queryMods, mods...)

	return Projects(queryMods...)
}

// Negative pointed to by the foreign key.
func (o *PanelJoin) Negative(mods ...qm.QueryMod) panelQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.NegativeID),
	}

	queryMods = append(queryMods, mods...)

	return Panels(queryMods...)
}

// Positive pointed to by the foreign key.
func (o *PanelJoin) Positive(mods ...qm.QueryMod) panelQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PositiveID),
	}

	queryMods = append(queryMods, mods...)

	return Panels(queryMods...)
}

// LoadProject allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (panelJoinL) LoadProject(ctx context.Context, e boil.ContextExecutor, singular bool, maybePanelJoin interface{}, mods queries.Applicator) error {
	var slice []*PanelJoin
	var object *PanelJoin

	if singular {
		var ok bool
		object, ok = maybePanelJoin.(*PanelJoin)
		if !ok {
			object = new(PanelJoin)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePanelJoin)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePanelJoin))
			}
		}
	} else {
		s, ok := maybePanelJoin.(*[]*PanelJoin)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePanelJoin)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePanelJoin))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &panelJoinR{}
		}
		args = append(args, object.ProjectID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &panelJoinR{}
			}

			for _, a := range args {
				if a == obj.ProjectID {
					continue Outer
				}
			}

			args = append(args, obj.ProjectID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`projects`),
		qm.WhereIn(`projects.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Project")
	}

	var resultSlice []*Project
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Project")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for projects")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for projects")
	}

	if len(panelJoinAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Project = foreign
		if foreign.R == nil {
			foreign.R = &projectR{}
		}
		foreign.R.PanelJoins = append(foreign.R.PanelJoins, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProjectID == foreign.ID {
				local.R.Project = foreign
				if foreign.R == nil {
					foreign.R = &projectR{}
				}
				foreign.R.PanelJoins = append(foreign.R.PanelJoins, local)
				break
			}
		}
	}

	return nil
}

// LoadNegative allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (panelJoinL) LoadNegative(ctx context.Context, e boil.ContextExecutor, singular bool, maybePanelJoin interface{}, mods queries.Applicator) error {
	var slice []*PanelJoin
	var object *PanelJoin

	if singular {
		var ok bool
		object, ok = maybePanelJoin.(*PanelJoin)
		if !ok {
			object = new(PanelJoin)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePanelJoin)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePanelJoin))
			}
		}
	} else {
		s, ok := maybePanelJoin.(*[]*PanelJoin)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePanelJoin)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePanelJoin))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &panelJoinR{}
		}
		args = append(args, object.NegativeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &panelJoinR{}
			}

			for _, a := range args {
				if a == obj.NegativeID {
					continue Outer
				}
			}

			args = append(args, obj.NegativeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`panels`),
		qm.WhereIn(`panels.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Panel")
	}

	var resultSlice []*Panel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Panel")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for panels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for panels")
	}

	if len(panelJoinAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Negative = foreign
		if foreign.R == nil {
			foreign.R = &panelR{}
		}
		foreign.R.NegativePanelJoins = append(foreign.R.NegativePanelJoins, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.NegativeID == foreign.ID {
				local.R.Negative = foreign
				if foreign.R == nil {
					foreign.R = &panelR{}
				}
				foreign.R.NegativePanelJoins = append(foreign.R.NegativePanelJoins, local)
				break
			}
		}
	}

	return nil
}

// LoadPositive allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (panelJoinL) LoadPositive(ctx context.Context, e boil.ContextExecutor, singular bool, maybePanelJoin interface{}, mods queries.Applicator) error {
	var slice []*PanelJoin
	var object *PanelJoin

	if singular {
		var ok bool
		object, ok = maybePanelJoin.(*PanelJoin)
		if !ok {
			object = new(PanelJoin)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePanelJoin)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePanelJoin))
			}
		}
	} else {
		s, ok := maybePanelJoin.(*[]*PanelJoin)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePanelJoin)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePanelJoin))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &panelJoinR{}
		}
		args = append(args, object.PositiveID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &panelJoinR{}
			}

			for _, a := range args {
				if a == obj.PositiveID {
					continue Outer
				}
			}

			args = append(args, obj.PositiveID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`panels`),
		qm.WhereIn(`panels.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Panel")
	}

	var resultSlice []*Panel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Panel")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for panels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for panels")
	}

	if len(panelJoinAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Positive = foreign
		if foreign.R == nil {
			foreign.R = &panelR{}
		}
		foreign.R.PositivePanelJoins = append(foreign.R.PositivePanelJoins, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PositiveID == foreign.ID {
				local.R.Positive = foreign
				if foreign.R == nil {
					foreign.R = &panelR{}
				}
				foreign.R.PositivePanelJoins = append(foreign.R.PositivePanelJoins, local)
				break
			}
		}
	}

	return nil
}

// SetProject of the panelJoin to the related item.
// Sets o.R.Project to related.
// Adds o to related.R.PanelJoins.
func (o *PanelJoin) SetProject(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Project) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"panel_joins\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"project_id"}),
		strmangle.WhereClause("\"", "\"", 2, panelJoinPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.PositiveID, o.NegativeID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProjectID = related.ID
	if o.R == nil {
		o.R = &panelJoinR{
			Project: related,
		}
	} else {
		o.R.Project = related
	}

	if related.R == nil {
		related.R = &projectR{
			PanelJoins: PanelJoinSlice{o},
		}
	} else {
		related.R.PanelJoins = append(related.R.PanelJoins, o)
	}

	return nil
}

// SetNegative of the panelJoin to the related item.
// Sets o.R.Negative to related.
// Adds o to related.R.NegativePanelJoins.
func (o *PanelJoin) SetNegative(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Panel) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"panel_joins\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"negative_id"}),
		strmangle.WhereClause("\"", "\"", 2, panelJoinPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.PositiveID, o.NegativeID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.NegativeID = related.ID
	if o.R == nil {
		o.R = &panelJoinR{
			Negative: related,
		}
	} else {
		o.R.Negative = related
	}

	if related.R == nil {
		related.R = &panelR{
			NegativePanelJoins: PanelJoinSlice{o},
		}
	} else {
		related.R.NegativePanelJoins = append(related.R.NegativePanelJoins, o)
	}

	return nil
}

// SetPositive of the panelJoin to the related item.
// Sets o.R.Positive to related.
// Adds o to related.R.PositivePanelJoins.
func (o *PanelJoin) SetPositive(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Panel) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"panel_joins\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"positive_id"}),
		strmangle.WhereClause("\"", "\"", 2, panelJoinPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.PositiveID, o.NegativeID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PositiveID = related.ID
	if o.R == nil {
		o.R = &panelJoinR{
			Positive: related,
		}
	} else {
		o.R.Positive = related
	}

	if related.R == nil {
		related.R = &panelR{
			PositivePanelJoins: PanelJoinSlice{o},
		}
	} else {
		related.R.PositivePanelJoins = append(related.R.PositivePanelJoins, o)
	}

	return nil
}

// PanelJoins retrieves all the records using an executor.
func PanelJoins(mods ...qm.QueryMod) panelJoinQuery {
	mods = append(mods, qm.From("\"panel_joins\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"panel_joins\".*"})
	}

	return panelJoinQuery{q}
}

// FindPanelJoin retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPanelJoin(ctx context.Context, exec boil.ContextExecutor, positiveID string, negativeID string, selectCols ...string) (*PanelJoin, error) {
	panelJoinObj := &PanelJoin{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"panel_joins\" where \"positive_id\"=$1 AND \"negative_id\"=$2", sel,
	)

	q := queries.Raw(query, positiveID, negativeID)

	err := q.Bind(ctx, exec, panelJoinObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from panel_joins")
	}

	if err = panelJoinObj.doAfterSelectHooks(ctx, exec); err != nil {
		return panelJoinObj, err
	}

	return panelJoinObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PanelJoin) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no panel_joins provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(panelJoinColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	panelJoinInsertCacheMut.RLock()
	cache, cached := panelJoinInsertCache[key]
	panelJoinInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			panelJoinAllColumns,
			panelJoinColumnsWithDefault,
			panelJoinColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(panelJoinType, panelJoinMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(panelJoinType, panelJoinMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"panel_joins\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"panel_joins\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into panel_joins")
	}

	if !cached {
		panelJoinInsertCacheMut.Lock()
		panelJoinInsertCache[key] = cache
		panelJoinInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PanelJoin.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PanelJoin) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	panelJoinUpdateCacheMut.RLock()
	cache, cached := panelJoinUpdateCache[key]
	panelJoinUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			panelJoinAllColumns,
			panelJoinPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update panel_joins, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"panel_joins\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, panelJoinPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(panelJoinType, panelJoinMapping, append(wl, panelJoinPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update panel_joins row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for panel_joins")
	}

	if !cached {
		panelJoinUpdateCacheMut.Lock()
		panelJoinUpdateCache[key] = cache
		panelJoinUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q panelJoinQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for panel_joins")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for panel_joins")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PanelJoinSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), panelJoinPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"panel_joins\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, panelJoinPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in panelJoin slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all panelJoin")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PanelJoin) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no panel_joins provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(panelJoinColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	panelJoinUpsertCacheMut.RLock()
	cache, cached := panelJoinUpsertCache[key]
	panelJoinUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			panelJoinAllColumns,
			panelJoinColumnsWithDefault,
			panelJoinColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			panelJoinAllColumns,
			panelJoinPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert panel_joins, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(panelJoinPrimaryKeyColumns))
			copy(conflict, panelJoinPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"panel_joins\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(panelJoinType, panelJoinMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(panelJoinType, panelJoinMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert panel_joins")
	}

	if !cached {
		panelJoinUpsertCacheMut.Lock()
		panelJoinUpsertCache[key] = cache
		panelJoinUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PanelJoin record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PanelJoin) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PanelJoin provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), panelJoinPrimaryKeyMapping)
	sql := "DELETE FROM \"panel_joins\" WHERE \"positive_id\"=$1 AND \"negative_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from panel_joins")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for panel_joins")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q panelJoinQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no panelJoinQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from panel_joins")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for panel_joins")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PanelJoinSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(panelJoinBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), panelJoinPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"panel_joins\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, panelJoinPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from panelJoin slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for panel_joins")
	}

	if len(panelJoinAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PanelJoin) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPanelJoin(ctx, exec, o.PositiveID, o.NegativeID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PanelJoinSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PanelJoinSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), panelJoinPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"panel_joins\".* FROM \"panel_joins\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, panelJoinPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PanelJoinSlice")
	}

	*o = slice

	return nil
}

// PanelJoinExists checks if the PanelJoin row exists.
func PanelJoinExists(ctx context.Context, exec boil.ContextExecutor, positiveID string, negativeID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"panel_joins\" where \"positive_id\"=$1 AND \"negative_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, positiveID, negativeID)
	}
	row := exec.QueryRowContext(ctx, sql, positiveID, negativeID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if panel_joins exists")
	}

	return exists, nil
}
