// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// Panel is an object representing the database table.
type Panel struct {
	ID                      int64         `boil:"id" json:"id" toml:"id" yaml:"id"`
	ProjectID               int64         `boil:"project_id" json:"project_id" toml:"project_id" yaml:"project_id"`
	InverterID              int64         `boil:"inverter_id" json:"inverter_id" toml:"inverter_id" yaml:"inverter_id"`
	TrackerID               int64         `boil:"tracker_id" json:"tracker_id" toml:"tracker_id" yaml:"tracker_id"`
	StringID                int64         `boil:"string_id" json:"string_id" toml:"string_id" yaml:"string_id"`
	Name                    string        `boil:"name" json:"name" toml:"name" yaml:"name"`
	CreatedAt               time.Time     `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	CreatedBy               int64         `boil:"created_by" json:"created_by" toml:"created_by" yaml:"created_by"`
	CurrentAtMaximumPower   types.Decimal `boil:"current_at_maximum_power" json:"current_at_maximum_power" toml:"current_at_maximum_power" yaml:"current_at_maximum_power"`
	ShortCircuitCurrent     types.Decimal `boil:"short_circuit_current" json:"short_circuit_current" toml:"short_circuit_current" yaml:"short_circuit_current"`
	ShortCircuitCurrentTemp types.Decimal `boil:"short_circuit_current_temp" json:"short_circuit_current_temp" toml:"short_circuit_current_temp" yaml:"short_circuit_current_temp"`
	MaximumPower            types.Decimal `boil:"maximum_power" json:"maximum_power" toml:"maximum_power" yaml:"maximum_power"`
	MaximumPowerTemp        types.Decimal `boil:"maximum_power_temp" json:"maximum_power_temp" toml:"maximum_power_temp" yaml:"maximum_power_temp"`
	VoltageAtMaximumPower   types.Decimal `boil:"voltage_at_maximum_power" json:"voltage_at_maximum_power" toml:"voltage_at_maximum_power" yaml:"voltage_at_maximum_power"`
	OpenCircuitVoltage      types.Decimal `boil:"open_circuit_voltage" json:"open_circuit_voltage" toml:"open_circuit_voltage" yaml:"open_circuit_voltage"`
	OpenCircuitVoltageTemp  types.Decimal `boil:"open_circuit_voltage_temp" json:"open_circuit_voltage_temp" toml:"open_circuit_voltage_temp" yaml:"open_circuit_voltage_temp"`
	Length                  int64         `boil:"length" json:"length" toml:"length" yaml:"length"`
	Weight                  types.Decimal `boil:"weight" json:"weight" toml:"weight" yaml:"weight"`
	Width                   int64         `boil:"width" json:"width" toml:"width" yaml:"width"`
	Version                 int           `boil:"version" json:"version" toml:"version" yaml:"version"`
	Location                string        `boil:"location" json:"location" toml:"location" yaml:"location"`
	Model                   int           `boil:"model" json:"model" toml:"model" yaml:"model"`
	Color                   string        `boil:"color" json:"color" toml:"color" yaml:"color"`

	R *panelR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L panelL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PanelColumns = struct {
	ID                      string
	ProjectID               string
	InverterID              string
	TrackerID               string
	StringID                string
	Name                    string
	CreatedAt               string
	CreatedBy               string
	CurrentAtMaximumPower   string
	ShortCircuitCurrent     string
	ShortCircuitCurrentTemp string
	MaximumPower            string
	MaximumPowerTemp        string
	VoltageAtMaximumPower   string
	OpenCircuitVoltage      string
	OpenCircuitVoltageTemp  string
	Length                  string
	Weight                  string
	Width                   string
	Version                 string
	Location                string
	Model                   string
	Color                   string
}{
	ID:                      "id",
	ProjectID:               "project_id",
	InverterID:              "inverter_id",
	TrackerID:               "tracker_id",
	StringID:                "string_id",
	Name:                    "name",
	CreatedAt:               "created_at",
	CreatedBy:               "created_by",
	CurrentAtMaximumPower:   "current_at_maximum_power",
	ShortCircuitCurrent:     "short_circuit_current",
	ShortCircuitCurrentTemp: "short_circuit_current_temp",
	MaximumPower:            "maximum_power",
	MaximumPowerTemp:        "maximum_power_temp",
	VoltageAtMaximumPower:   "voltage_at_maximum_power",
	OpenCircuitVoltage:      "open_circuit_voltage",
	OpenCircuitVoltageTemp:  "open_circuit_voltage_temp",
	Length:                  "length",
	Weight:                  "weight",
	Width:                   "width",
	Version:                 "version",
	Location:                "location",
	Model:                   "model",
	Color:                   "color",
}

var PanelTableColumns = struct {
	ID                      string
	ProjectID               string
	InverterID              string
	TrackerID               string
	StringID                string
	Name                    string
	CreatedAt               string
	CreatedBy               string
	CurrentAtMaximumPower   string
	ShortCircuitCurrent     string
	ShortCircuitCurrentTemp string
	MaximumPower            string
	MaximumPowerTemp        string
	VoltageAtMaximumPower   string
	OpenCircuitVoltage      string
	OpenCircuitVoltageTemp  string
	Length                  string
	Weight                  string
	Width                   string
	Version                 string
	Location                string
	Model                   string
	Color                   string
}{
	ID:                      "panels.id",
	ProjectID:               "panels.project_id",
	InverterID:              "panels.inverter_id",
	TrackerID:               "panels.tracker_id",
	StringID:                "panels.string_id",
	Name:                    "panels.name",
	CreatedAt:               "panels.created_at",
	CreatedBy:               "panels.created_by",
	CurrentAtMaximumPower:   "panels.current_at_maximum_power",
	ShortCircuitCurrent:     "panels.short_circuit_current",
	ShortCircuitCurrentTemp: "panels.short_circuit_current_temp",
	MaximumPower:            "panels.maximum_power",
	MaximumPowerTemp:        "panels.maximum_power_temp",
	VoltageAtMaximumPower:   "panels.voltage_at_maximum_power",
	OpenCircuitVoltage:      "panels.open_circuit_voltage",
	OpenCircuitVoltageTemp:  "panels.open_circuit_voltage_temp",
	Length:                  "panels.length",
	Weight:                  "panels.weight",
	Width:                   "panels.width",
	Version:                 "panels.version",
	Location:                "panels.location",
	Model:                   "panels.model",
	Color:                   "panels.color",
}

// Generated where

type whereHelpertypes_Decimal struct{ field string }

func (w whereHelpertypes_Decimal) EQ(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_Decimal) NEQ(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_Decimal) LT(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_Decimal) LTE(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_Decimal) GT(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_Decimal) GTE(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var PanelWhere = struct {
	ID                      whereHelperint64
	ProjectID               whereHelperint64
	InverterID              whereHelperint64
	TrackerID               whereHelperint64
	StringID                whereHelperint64
	Name                    whereHelperstring
	CreatedAt               whereHelpertime_Time
	CreatedBy               whereHelperint64
	CurrentAtMaximumPower   whereHelpertypes_Decimal
	ShortCircuitCurrent     whereHelpertypes_Decimal
	ShortCircuitCurrentTemp whereHelpertypes_Decimal
	MaximumPower            whereHelpertypes_Decimal
	MaximumPowerTemp        whereHelpertypes_Decimal
	VoltageAtMaximumPower   whereHelpertypes_Decimal
	OpenCircuitVoltage      whereHelpertypes_Decimal
	OpenCircuitVoltageTemp  whereHelpertypes_Decimal
	Length                  whereHelperint64
	Weight                  whereHelpertypes_Decimal
	Width                   whereHelperint64
	Version                 whereHelperint
	Location                whereHelperstring
	Model                   whereHelperint
	Color                   whereHelperstring
}{
	ID:                      whereHelperint64{field: "\"panels\".\"id\""},
	ProjectID:               whereHelperint64{field: "\"panels\".\"project_id\""},
	InverterID:              whereHelperint64{field: "\"panels\".\"inverter_id\""},
	TrackerID:               whereHelperint64{field: "\"panels\".\"tracker_id\""},
	StringID:                whereHelperint64{field: "\"panels\".\"string_id\""},
	Name:                    whereHelperstring{field: "\"panels\".\"name\""},
	CreatedAt:               whereHelpertime_Time{field: "\"panels\".\"created_at\""},
	CreatedBy:               whereHelperint64{field: "\"panels\".\"created_by\""},
	CurrentAtMaximumPower:   whereHelpertypes_Decimal{field: "\"panels\".\"current_at_maximum_power\""},
	ShortCircuitCurrent:     whereHelpertypes_Decimal{field: "\"panels\".\"short_circuit_current\""},
	ShortCircuitCurrentTemp: whereHelpertypes_Decimal{field: "\"panels\".\"short_circuit_current_temp\""},
	MaximumPower:            whereHelpertypes_Decimal{field: "\"panels\".\"maximum_power\""},
	MaximumPowerTemp:        whereHelpertypes_Decimal{field: "\"panels\".\"maximum_power_temp\""},
	VoltageAtMaximumPower:   whereHelpertypes_Decimal{field: "\"panels\".\"voltage_at_maximum_power\""},
	OpenCircuitVoltage:      whereHelpertypes_Decimal{field: "\"panels\".\"open_circuit_voltage\""},
	OpenCircuitVoltageTemp:  whereHelpertypes_Decimal{field: "\"panels\".\"open_circuit_voltage_temp\""},
	Length:                  whereHelperint64{field: "\"panels\".\"length\""},
	Weight:                  whereHelpertypes_Decimal{field: "\"panels\".\"weight\""},
	Width:                   whereHelperint64{field: "\"panels\".\"width\""},
	Version:                 whereHelperint{field: "\"panels\".\"version\""},
	Location:                whereHelperstring{field: "\"panels\".\"location\""},
	Model:                   whereHelperint{field: "\"panels\".\"model\""},
	Color:                   whereHelperstring{field: "\"panels\".\"color\""},
}

// PanelRels is where relationship names are stored.
var PanelRels = struct {
	CreatedByUser string
	Inverter      string
	Project       string
	String        string
	Tracker       string
}{
	CreatedByUser: "CreatedByUser",
	Inverter:      "Inverter",
	Project:       "Project",
	String:        "String",
	Tracker:       "Tracker",
}

// panelR is where relationships are stored.
type panelR struct {
	CreatedByUser *User     `boil:"CreatedByUser" json:"CreatedByUser" toml:"CreatedByUser" yaml:"CreatedByUser"`
	Inverter      *Inverter `boil:"Inverter" json:"Inverter" toml:"Inverter" yaml:"Inverter"`
	Project       *Project  `boil:"Project" json:"Project" toml:"Project" yaml:"Project"`
	String        *String   `boil:"String" json:"String" toml:"String" yaml:"String"`
	Tracker       *Tracker  `boil:"Tracker" json:"Tracker" toml:"Tracker" yaml:"Tracker"`
}

// NewStruct creates a new relationship struct
func (*panelR) NewStruct() *panelR {
	return &panelR{}
}

func (r *panelR) GetCreatedByUser() *User {
	if r == nil {
		return nil
	}
	return r.CreatedByUser
}

func (r *panelR) GetInverter() *Inverter {
	if r == nil {
		return nil
	}
	return r.Inverter
}

func (r *panelR) GetProject() *Project {
	if r == nil {
		return nil
	}
	return r.Project
}

func (r *panelR) GetString() *String {
	if r == nil {
		return nil
	}
	return r.String
}

func (r *panelR) GetTracker() *Tracker {
	if r == nil {
		return nil
	}
	return r.Tracker
}

// panelL is where Load methods for each relationship are stored.
type panelL struct{}

var (
	panelAllColumns            = []string{"id", "project_id", "inverter_id", "tracker_id", "string_id", "name", "created_at", "created_by", "current_at_maximum_power", "short_circuit_current", "short_circuit_current_temp", "maximum_power", "maximum_power_temp", "voltage_at_maximum_power", "open_circuit_voltage", "open_circuit_voltage_temp", "length", "weight", "width", "version", "location", "model", "color"}
	panelColumnsWithoutDefault = []string{"project_id", "inverter_id", "tracker_id", "string_id", "name"}
	panelColumnsWithDefault    = []string{"id", "created_at", "created_by", "current_at_maximum_power", "short_circuit_current", "short_circuit_current_temp", "maximum_power", "maximum_power_temp", "voltage_at_maximum_power", "open_circuit_voltage", "open_circuit_voltage_temp", "length", "weight", "width", "version", "location", "model", "color"}
	panelPrimaryKeyColumns     = []string{"id"}
	panelGeneratedColumns      = []string{}
)

type (
	// PanelSlice is an alias for a slice of pointers to Panel.
	// This should almost always be used instead of []Panel.
	PanelSlice []*Panel
	// PanelHook is the signature for custom Panel hook methods
	PanelHook func(context.Context, boil.ContextExecutor, *Panel) error

	panelQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	panelType                 = reflect.TypeOf(&Panel{})
	panelMapping              = queries.MakeStructMapping(panelType)
	panelPrimaryKeyMapping, _ = queries.BindMapping(panelType, panelMapping, panelPrimaryKeyColumns)
	panelInsertCacheMut       sync.RWMutex
	panelInsertCache          = make(map[string]insertCache)
	panelUpdateCacheMut       sync.RWMutex
	panelUpdateCache          = make(map[string]updateCache)
	panelUpsertCacheMut       sync.RWMutex
	panelUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var panelAfterSelectHooks []PanelHook

var panelBeforeInsertHooks []PanelHook
var panelAfterInsertHooks []PanelHook

var panelBeforeUpdateHooks []PanelHook
var panelAfterUpdateHooks []PanelHook

var panelBeforeDeleteHooks []PanelHook
var panelAfterDeleteHooks []PanelHook

var panelBeforeUpsertHooks []PanelHook
var panelAfterUpsertHooks []PanelHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Panel) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range panelAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Panel) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range panelBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Panel) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range panelAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Panel) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range panelBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Panel) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range panelAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Panel) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range panelBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Panel) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range panelAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Panel) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range panelBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Panel) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range panelAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPanelHook registers your hook function for all future operations.
func AddPanelHook(hookPoint boil.HookPoint, panelHook PanelHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		panelAfterSelectHooks = append(panelAfterSelectHooks, panelHook)
	case boil.BeforeInsertHook:
		panelBeforeInsertHooks = append(panelBeforeInsertHooks, panelHook)
	case boil.AfterInsertHook:
		panelAfterInsertHooks = append(panelAfterInsertHooks, panelHook)
	case boil.BeforeUpdateHook:
		panelBeforeUpdateHooks = append(panelBeforeUpdateHooks, panelHook)
	case boil.AfterUpdateHook:
		panelAfterUpdateHooks = append(panelAfterUpdateHooks, panelHook)
	case boil.BeforeDeleteHook:
		panelBeforeDeleteHooks = append(panelBeforeDeleteHooks, panelHook)
	case boil.AfterDeleteHook:
		panelAfterDeleteHooks = append(panelAfterDeleteHooks, panelHook)
	case boil.BeforeUpsertHook:
		panelBeforeUpsertHooks = append(panelBeforeUpsertHooks, panelHook)
	case boil.AfterUpsertHook:
		panelAfterUpsertHooks = append(panelAfterUpsertHooks, panelHook)
	}
}

// One returns a single panel record from the query.
func (q panelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Panel, error) {
	o := &Panel{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for panels")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Panel records from the query.
func (q panelQuery) All(ctx context.Context, exec boil.ContextExecutor) (PanelSlice, error) {
	var o []*Panel

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Panel slice")
	}

	if len(panelAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Panel records in the query.
func (q panelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count panels rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q panelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if panels exists")
	}

	return count > 0, nil
}

// CreatedByUser pointed to by the foreign key.
func (o *Panel) CreatedByUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CreatedBy),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Inverter pointed to by the foreign key.
func (o *Panel) Inverter(mods ...qm.QueryMod) inverterQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.InverterID),
	}

	queryMods = append(queryMods, mods...)

	return Inverters(queryMods...)
}

// Project pointed to by the foreign key.
func (o *Panel) Project(mods ...qm.QueryMod) projectQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProjectID),
	}

	queryMods = append(queryMods, mods...)

	return Projects(queryMods...)
}

// String pointed to by the foreign key.
func (o *Panel) String(mods ...qm.QueryMod) stringQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.StringID),
	}

	queryMods = append(queryMods, mods...)

	return Strings(queryMods...)
}

// Tracker pointed to by the foreign key.
func (o *Panel) Tracker(mods ...qm.QueryMod) trackerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TrackerID),
	}

	queryMods = append(queryMods, mods...)

	return Trackers(queryMods...)
}

// LoadCreatedByUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (panelL) LoadCreatedByUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybePanel interface{}, mods queries.Applicator) error {
	var slice []*Panel
	var object *Panel

	if singular {
		var ok bool
		object, ok = maybePanel.(*Panel)
		if !ok {
			object = new(Panel)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePanel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePanel))
			}
		}
	} else {
		s, ok := maybePanel.(*[]*Panel)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePanel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePanel))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &panelR{}
		}
		args = append(args, object.CreatedBy)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &panelR{}
			}

			for _, a := range args {
				if a == obj.CreatedBy {
					continue Outer
				}
			}

			args = append(args, obj.CreatedBy)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(panelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CreatedByUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CreatedByPanels = append(foreign.R.CreatedByPanels, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CreatedBy == foreign.ID {
				local.R.CreatedByUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CreatedByPanels = append(foreign.R.CreatedByPanels, local)
				break
			}
		}
	}

	return nil
}

// LoadInverter allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (panelL) LoadInverter(ctx context.Context, e boil.ContextExecutor, singular bool, maybePanel interface{}, mods queries.Applicator) error {
	var slice []*Panel
	var object *Panel

	if singular {
		var ok bool
		object, ok = maybePanel.(*Panel)
		if !ok {
			object = new(Panel)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePanel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePanel))
			}
		}
	} else {
		s, ok := maybePanel.(*[]*Panel)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePanel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePanel))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &panelR{}
		}
		args = append(args, object.InverterID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &panelR{}
			}

			for _, a := range args {
				if a == obj.InverterID {
					continue Outer
				}
			}

			args = append(args, obj.InverterID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`inverters`),
		qm.WhereIn(`inverters.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Inverter")
	}

	var resultSlice []*Inverter
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Inverter")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for inverters")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for inverters")
	}

	if len(panelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Inverter = foreign
		if foreign.R == nil {
			foreign.R = &inverterR{}
		}
		foreign.R.Panels = append(foreign.R.Panels, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.InverterID == foreign.ID {
				local.R.Inverter = foreign
				if foreign.R == nil {
					foreign.R = &inverterR{}
				}
				foreign.R.Panels = append(foreign.R.Panels, local)
				break
			}
		}
	}

	return nil
}

// LoadProject allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (panelL) LoadProject(ctx context.Context, e boil.ContextExecutor, singular bool, maybePanel interface{}, mods queries.Applicator) error {
	var slice []*Panel
	var object *Panel

	if singular {
		var ok bool
		object, ok = maybePanel.(*Panel)
		if !ok {
			object = new(Panel)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePanel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePanel))
			}
		}
	} else {
		s, ok := maybePanel.(*[]*Panel)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePanel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePanel))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &panelR{}
		}
		args = append(args, object.ProjectID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &panelR{}
			}

			for _, a := range args {
				if a == obj.ProjectID {
					continue Outer
				}
			}

			args = append(args, obj.ProjectID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`projects`),
		qm.WhereIn(`projects.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Project")
	}

	var resultSlice []*Project
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Project")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for projects")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for projects")
	}

	if len(panelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Project = foreign
		if foreign.R == nil {
			foreign.R = &projectR{}
		}
		foreign.R.Panels = append(foreign.R.Panels, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProjectID == foreign.ID {
				local.R.Project = foreign
				if foreign.R == nil {
					foreign.R = &projectR{}
				}
				foreign.R.Panels = append(foreign.R.Panels, local)
				break
			}
		}
	}

	return nil
}

// LoadString allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (panelL) LoadString(ctx context.Context, e boil.ContextExecutor, singular bool, maybePanel interface{}, mods queries.Applicator) error {
	var slice []*Panel
	var object *Panel

	if singular {
		var ok bool
		object, ok = maybePanel.(*Panel)
		if !ok {
			object = new(Panel)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePanel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePanel))
			}
		}
	} else {
		s, ok := maybePanel.(*[]*Panel)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePanel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePanel))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &panelR{}
		}
		args = append(args, object.StringID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &panelR{}
			}

			for _, a := range args {
				if a == obj.StringID {
					continue Outer
				}
			}

			args = append(args, obj.StringID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`strings`),
		qm.WhereIn(`strings.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load String")
	}

	var resultSlice []*String
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice String")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for strings")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for strings")
	}

	if len(panelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.String = foreign
		if foreign.R == nil {
			foreign.R = &stringR{}
		}
		foreign.R.Panels = append(foreign.R.Panels, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StringID == foreign.ID {
				local.R.String = foreign
				if foreign.R == nil {
					foreign.R = &stringR{}
				}
				foreign.R.Panels = append(foreign.R.Panels, local)
				break
			}
		}
	}

	return nil
}

// LoadTracker allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (panelL) LoadTracker(ctx context.Context, e boil.ContextExecutor, singular bool, maybePanel interface{}, mods queries.Applicator) error {
	var slice []*Panel
	var object *Panel

	if singular {
		var ok bool
		object, ok = maybePanel.(*Panel)
		if !ok {
			object = new(Panel)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePanel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePanel))
			}
		}
	} else {
		s, ok := maybePanel.(*[]*Panel)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePanel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePanel))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &panelR{}
		}
		args = append(args, object.TrackerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &panelR{}
			}

			for _, a := range args {
				if a == obj.TrackerID {
					continue Outer
				}
			}

			args = append(args, obj.TrackerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`trackers`),
		qm.WhereIn(`trackers.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Tracker")
	}

	var resultSlice []*Tracker
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Tracker")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for trackers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for trackers")
	}

	if len(panelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Tracker = foreign
		if foreign.R == nil {
			foreign.R = &trackerR{}
		}
		foreign.R.Panels = append(foreign.R.Panels, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TrackerID == foreign.ID {
				local.R.Tracker = foreign
				if foreign.R == nil {
					foreign.R = &trackerR{}
				}
				foreign.R.Panels = append(foreign.R.Panels, local)
				break
			}
		}
	}

	return nil
}

// SetCreatedByUser of the panel to the related item.
// Sets o.R.CreatedByUser to related.
// Adds o to related.R.CreatedByPanels.
func (o *Panel) SetCreatedByUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"panels\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"created_by"}),
		strmangle.WhereClause("\"", "\"", 2, panelPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CreatedBy = related.ID
	if o.R == nil {
		o.R = &panelR{
			CreatedByUser: related,
		}
	} else {
		o.R.CreatedByUser = related
	}

	if related.R == nil {
		related.R = &userR{
			CreatedByPanels: PanelSlice{o},
		}
	} else {
		related.R.CreatedByPanels = append(related.R.CreatedByPanels, o)
	}

	return nil
}

// SetInverter of the panel to the related item.
// Sets o.R.Inverter to related.
// Adds o to related.R.Panels.
func (o *Panel) SetInverter(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Inverter) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"panels\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"inverter_id"}),
		strmangle.WhereClause("\"", "\"", 2, panelPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.InverterID = related.ID
	if o.R == nil {
		o.R = &panelR{
			Inverter: related,
		}
	} else {
		o.R.Inverter = related
	}

	if related.R == nil {
		related.R = &inverterR{
			Panels: PanelSlice{o},
		}
	} else {
		related.R.Panels = append(related.R.Panels, o)
	}

	return nil
}

// SetProject of the panel to the related item.
// Sets o.R.Project to related.
// Adds o to related.R.Panels.
func (o *Panel) SetProject(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Project) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"panels\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"project_id"}),
		strmangle.WhereClause("\"", "\"", 2, panelPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProjectID = related.ID
	if o.R == nil {
		o.R = &panelR{
			Project: related,
		}
	} else {
		o.R.Project = related
	}

	if related.R == nil {
		related.R = &projectR{
			Panels: PanelSlice{o},
		}
	} else {
		related.R.Panels = append(related.R.Panels, o)
	}

	return nil
}

// SetString of the panel to the related item.
// Sets o.R.String to related.
// Adds o to related.R.Panels.
func (o *Panel) SetString(ctx context.Context, exec boil.ContextExecutor, insert bool, related *String) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"panels\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"string_id"}),
		strmangle.WhereClause("\"", "\"", 2, panelPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.StringID = related.ID
	if o.R == nil {
		o.R = &panelR{
			String: related,
		}
	} else {
		o.R.String = related
	}

	if related.R == nil {
		related.R = &stringR{
			Panels: PanelSlice{o},
		}
	} else {
		related.R.Panels = append(related.R.Panels, o)
	}

	return nil
}

// SetTracker of the panel to the related item.
// Sets o.R.Tracker to related.
// Adds o to related.R.Panels.
func (o *Panel) SetTracker(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Tracker) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"panels\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"tracker_id"}),
		strmangle.WhereClause("\"", "\"", 2, panelPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TrackerID = related.ID
	if o.R == nil {
		o.R = &panelR{
			Tracker: related,
		}
	} else {
		o.R.Tracker = related
	}

	if related.R == nil {
		related.R = &trackerR{
			Panels: PanelSlice{o},
		}
	} else {
		related.R.Panels = append(related.R.Panels, o)
	}

	return nil
}

// Panels retrieves all the records using an executor.
func Panels(mods ...qm.QueryMod) panelQuery {
	mods = append(mods, qm.From("\"panels\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"panels\".*"})
	}

	return panelQuery{q}
}

// FindPanel retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPanel(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Panel, error) {
	panelObj := &Panel{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"panels\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, panelObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from panels")
	}

	if err = panelObj.doAfterSelectHooks(ctx, exec); err != nil {
		return panelObj, err
	}

	return panelObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Panel) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no panels provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(panelColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	panelInsertCacheMut.RLock()
	cache, cached := panelInsertCache[key]
	panelInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			panelAllColumns,
			panelColumnsWithDefault,
			panelColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(panelType, panelMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(panelType, panelMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"panels\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"panels\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into panels")
	}

	if !cached {
		panelInsertCacheMut.Lock()
		panelInsertCache[key] = cache
		panelInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Panel.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Panel) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	panelUpdateCacheMut.RLock()
	cache, cached := panelUpdateCache[key]
	panelUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			panelAllColumns,
			panelPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update panels, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"panels\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, panelPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(panelType, panelMapping, append(wl, panelPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update panels row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for panels")
	}

	if !cached {
		panelUpdateCacheMut.Lock()
		panelUpdateCache[key] = cache
		panelUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q panelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for panels")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for panels")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PanelSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), panelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"panels\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, panelPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in panel slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all panel")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Panel) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no panels provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(panelColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	panelUpsertCacheMut.RLock()
	cache, cached := panelUpsertCache[key]
	panelUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			panelAllColumns,
			panelColumnsWithDefault,
			panelColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			panelAllColumns,
			panelPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert panels, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(panelPrimaryKeyColumns))
			copy(conflict, panelPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"panels\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(panelType, panelMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(panelType, panelMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert panels")
	}

	if !cached {
		panelUpsertCacheMut.Lock()
		panelUpsertCache[key] = cache
		panelUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Panel record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Panel) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Panel provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), panelPrimaryKeyMapping)
	sql := "DELETE FROM \"panels\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from panels")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for panels")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q panelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no panelQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from panels")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for panels")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PanelSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(panelBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), panelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"panels\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, panelPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from panel slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for panels")
	}

	if len(panelAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Panel) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPanel(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PanelSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PanelSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), panelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"panels\".* FROM \"panels\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, panelPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PanelSlice")
	}

	*o = slice

	return nil
}

// PanelExists checks if the Panel row exists.
func PanelExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"panels\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if panels exists")
	}

	return exists, nil
}
