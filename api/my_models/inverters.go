// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Inverter is an object representing the database table.
type Inverter struct {
	ID                  string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name                string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	CreatedAt           time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	CreatedBy           int64     `boil:"created_by" json:"created_by" toml:"created_by" yaml:"created_by"`
	Version             int       `boil:"version" json:"version" toml:"version" yaml:"version"`
	ProjectID           int64     `boil:"project_id" json:"project_id" toml:"project_id" yaml:"project_id"`
	TrackerAmount       int       `boil:"tracker_amount" json:"tracker_amount" toml:"tracker_amount" yaml:"tracker_amount"`
	AcNominalOutput     int64     `boil:"ac_nominal_output" json:"ac_nominal_output" toml:"ac_nominal_output" yaml:"ac_nominal_output"`
	AcOutputCurrent     int64     `boil:"ac_output_current" json:"ac_output_current" toml:"ac_output_current" yaml:"ac_output_current"`
	EuropeanEfficiency  int64     `boil:"european_efficiency" json:"european_efficiency" toml:"european_efficiency" yaml:"european_efficiency"`
	MaxInputCurrent     int64     `boil:"max_input_current" json:"max_input_current" toml:"max_input_current" yaml:"max_input_current"`
	MaxOutputPower      int64     `boil:"max_output_power" json:"max_output_power" toml:"max_output_power" yaml:"max_output_power"`
	MPPVoltageRangeLow  int64     `boil:"mpp_voltage_range_low" json:"mpp_voltage_range_low" toml:"mpp_voltage_range_low" yaml:"mpp_voltage_range_low"`
	MPPVoltageRangeHigh int64     `boil:"mpp_voltage_range_high" json:"mpp_voltage_range_high" toml:"mpp_voltage_range_high" yaml:"mpp_voltage_range_high"`
	StartUpVoltage      int64     `boil:"start_up_voltage" json:"start_up_voltage" toml:"start_up_voltage" yaml:"start_up_voltage"`
	Model               int       `boil:"model" json:"model" toml:"model" yaml:"model"`
	Type                string    `boil:"type" json:"type" toml:"type" yaml:"type"`
	Location            string    `boil:"location" json:"location" toml:"location" yaml:"location"`
	Color               string    `boil:"color" json:"color" toml:"color" yaml:"color"`

	R *inverterR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L inverterL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var InverterColumns = struct {
	ID                  string
	Name                string
	CreatedAt           string
	CreatedBy           string
	Version             string
	ProjectID           string
	TrackerAmount       string
	AcNominalOutput     string
	AcOutputCurrent     string
	EuropeanEfficiency  string
	MaxInputCurrent     string
	MaxOutputPower      string
	MPPVoltageRangeLow  string
	MPPVoltageRangeHigh string
	StartUpVoltage      string
	Model               string
	Type                string
	Location            string
	Color               string
}{
	ID:                  "id",
	Name:                "name",
	CreatedAt:           "created_at",
	CreatedBy:           "created_by",
	Version:             "version",
	ProjectID:           "project_id",
	TrackerAmount:       "tracker_amount",
	AcNominalOutput:     "ac_nominal_output",
	AcOutputCurrent:     "ac_output_current",
	EuropeanEfficiency:  "european_efficiency",
	MaxInputCurrent:     "max_input_current",
	MaxOutputPower:      "max_output_power",
	MPPVoltageRangeLow:  "mpp_voltage_range_low",
	MPPVoltageRangeHigh: "mpp_voltage_range_high",
	StartUpVoltage:      "start_up_voltage",
	Model:               "model",
	Type:                "type",
	Location:            "location",
	Color:               "color",
}

var InverterTableColumns = struct {
	ID                  string
	Name                string
	CreatedAt           string
	CreatedBy           string
	Version             string
	ProjectID           string
	TrackerAmount       string
	AcNominalOutput     string
	AcOutputCurrent     string
	EuropeanEfficiency  string
	MaxInputCurrent     string
	MaxOutputPower      string
	MPPVoltageRangeLow  string
	MPPVoltageRangeHigh string
	StartUpVoltage      string
	Model               string
	Type                string
	Location            string
	Color               string
}{
	ID:                  "inverters.id",
	Name:                "inverters.name",
	CreatedAt:           "inverters.created_at",
	CreatedBy:           "inverters.created_by",
	Version:             "inverters.version",
	ProjectID:           "inverters.project_id",
	TrackerAmount:       "inverters.tracker_amount",
	AcNominalOutput:     "inverters.ac_nominal_output",
	AcOutputCurrent:     "inverters.ac_output_current",
	EuropeanEfficiency:  "inverters.european_efficiency",
	MaxInputCurrent:     "inverters.max_input_current",
	MaxOutputPower:      "inverters.max_output_power",
	MPPVoltageRangeLow:  "inverters.mpp_voltage_range_low",
	MPPVoltageRangeHigh: "inverters.mpp_voltage_range_high",
	StartUpVoltage:      "inverters.start_up_voltage",
	Model:               "inverters.model",
	Type:                "inverters.type",
	Location:            "inverters.location",
	Color:               "inverters.color",
}

// Generated where

var InverterWhere = struct {
	ID                  whereHelperstring
	Name                whereHelperstring
	CreatedAt           whereHelpertime_Time
	CreatedBy           whereHelperint64
	Version             whereHelperint
	ProjectID           whereHelperint64
	TrackerAmount       whereHelperint
	AcNominalOutput     whereHelperint64
	AcOutputCurrent     whereHelperint64
	EuropeanEfficiency  whereHelperint64
	MaxInputCurrent     whereHelperint64
	MaxOutputPower      whereHelperint64
	MPPVoltageRangeLow  whereHelperint64
	MPPVoltageRangeHigh whereHelperint64
	StartUpVoltage      whereHelperint64
	Model               whereHelperint
	Type                whereHelperstring
	Location            whereHelperstring
	Color               whereHelperstring
}{
	ID:                  whereHelperstring{field: "\"inverters\".\"id\""},
	Name:                whereHelperstring{field: "\"inverters\".\"name\""},
	CreatedAt:           whereHelpertime_Time{field: "\"inverters\".\"created_at\""},
	CreatedBy:           whereHelperint64{field: "\"inverters\".\"created_by\""},
	Version:             whereHelperint{field: "\"inverters\".\"version\""},
	ProjectID:           whereHelperint64{field: "\"inverters\".\"project_id\""},
	TrackerAmount:       whereHelperint{field: "\"inverters\".\"tracker_amount\""},
	AcNominalOutput:     whereHelperint64{field: "\"inverters\".\"ac_nominal_output\""},
	AcOutputCurrent:     whereHelperint64{field: "\"inverters\".\"ac_output_current\""},
	EuropeanEfficiency:  whereHelperint64{field: "\"inverters\".\"european_efficiency\""},
	MaxInputCurrent:     whereHelperint64{field: "\"inverters\".\"max_input_current\""},
	MaxOutputPower:      whereHelperint64{field: "\"inverters\".\"max_output_power\""},
	MPPVoltageRangeLow:  whereHelperint64{field: "\"inverters\".\"mpp_voltage_range_low\""},
	MPPVoltageRangeHigh: whereHelperint64{field: "\"inverters\".\"mpp_voltage_range_high\""},
	StartUpVoltage:      whereHelperint64{field: "\"inverters\".\"start_up_voltage\""},
	Model:               whereHelperint{field: "\"inverters\".\"model\""},
	Type:                whereHelperstring{field: "\"inverters\".\"type\""},
	Location:            whereHelperstring{field: "\"inverters\".\"location\""},
	Color:               whereHelperstring{field: "\"inverters\".\"color\""},
}

// InverterRels is where relationship names are stored.
var InverterRels = struct {
	CreatedByUser string
	Project       string
	Trackers      string
}{
	CreatedByUser: "CreatedByUser",
	Project:       "Project",
	Trackers:      "Trackers",
}

// inverterR is where relationships are stored.
type inverterR struct {
	CreatedByUser *User        `boil:"CreatedByUser" json:"CreatedByUser" toml:"CreatedByUser" yaml:"CreatedByUser"`
	Project       *Project     `boil:"Project" json:"Project" toml:"Project" yaml:"Project"`
	Trackers      TrackerSlice `boil:"Trackers" json:"Trackers" toml:"Trackers" yaml:"Trackers"`
}

// NewStruct creates a new relationship struct
func (*inverterR) NewStruct() *inverterR {
	return &inverterR{}
}

func (r *inverterR) GetCreatedByUser() *User {
	if r == nil {
		return nil
	}
	return r.CreatedByUser
}

func (r *inverterR) GetProject() *Project {
	if r == nil {
		return nil
	}
	return r.Project
}

func (r *inverterR) GetTrackers() TrackerSlice {
	if r == nil {
		return nil
	}
	return r.Trackers
}

// inverterL is where Load methods for each relationship are stored.
type inverterL struct{}

var (
	inverterAllColumns            = []string{"id", "name", "created_at", "created_by", "version", "project_id", "tracker_amount", "ac_nominal_output", "ac_output_current", "european_efficiency", "max_input_current", "max_output_power", "mpp_voltage_range_low", "mpp_voltage_range_high", "start_up_voltage", "model", "type", "location", "color"}
	inverterColumnsWithoutDefault = []string{"name", "project_id", "tracker_amount", "ac_nominal_output", "ac_output_current", "european_efficiency", "max_input_current", "max_output_power", "mpp_voltage_range_low", "mpp_voltage_range_high", "start_up_voltage"}
	inverterColumnsWithDefault    = []string{"id", "created_at", "created_by", "version", "model", "type", "location", "color"}
	inverterPrimaryKeyColumns     = []string{"id"}
	inverterGeneratedColumns      = []string{}
)

type (
	// InverterSlice is an alias for a slice of pointers to Inverter.
	// This should almost always be used instead of []Inverter.
	InverterSlice []*Inverter
	// InverterHook is the signature for custom Inverter hook methods
	InverterHook func(context.Context, boil.ContextExecutor, *Inverter) error

	inverterQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	inverterType                 = reflect.TypeOf(&Inverter{})
	inverterMapping              = queries.MakeStructMapping(inverterType)
	inverterPrimaryKeyMapping, _ = queries.BindMapping(inverterType, inverterMapping, inverterPrimaryKeyColumns)
	inverterInsertCacheMut       sync.RWMutex
	inverterInsertCache          = make(map[string]insertCache)
	inverterUpdateCacheMut       sync.RWMutex
	inverterUpdateCache          = make(map[string]updateCache)
	inverterUpsertCacheMut       sync.RWMutex
	inverterUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var inverterAfterSelectHooks []InverterHook

var inverterBeforeInsertHooks []InverterHook
var inverterAfterInsertHooks []InverterHook

var inverterBeforeUpdateHooks []InverterHook
var inverterAfterUpdateHooks []InverterHook

var inverterBeforeDeleteHooks []InverterHook
var inverterAfterDeleteHooks []InverterHook

var inverterBeforeUpsertHooks []InverterHook
var inverterAfterUpsertHooks []InverterHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Inverter) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inverterAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Inverter) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inverterBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Inverter) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inverterAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Inverter) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inverterBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Inverter) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inverterAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Inverter) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inverterBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Inverter) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inverterAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Inverter) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inverterBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Inverter) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inverterAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddInverterHook registers your hook function for all future operations.
func AddInverterHook(hookPoint boil.HookPoint, inverterHook InverterHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		inverterAfterSelectHooks = append(inverterAfterSelectHooks, inverterHook)
	case boil.BeforeInsertHook:
		inverterBeforeInsertHooks = append(inverterBeforeInsertHooks, inverterHook)
	case boil.AfterInsertHook:
		inverterAfterInsertHooks = append(inverterAfterInsertHooks, inverterHook)
	case boil.BeforeUpdateHook:
		inverterBeforeUpdateHooks = append(inverterBeforeUpdateHooks, inverterHook)
	case boil.AfterUpdateHook:
		inverterAfterUpdateHooks = append(inverterAfterUpdateHooks, inverterHook)
	case boil.BeforeDeleteHook:
		inverterBeforeDeleteHooks = append(inverterBeforeDeleteHooks, inverterHook)
	case boil.AfterDeleteHook:
		inverterAfterDeleteHooks = append(inverterAfterDeleteHooks, inverterHook)
	case boil.BeforeUpsertHook:
		inverterBeforeUpsertHooks = append(inverterBeforeUpsertHooks, inverterHook)
	case boil.AfterUpsertHook:
		inverterAfterUpsertHooks = append(inverterAfterUpsertHooks, inverterHook)
	}
}

// One returns a single inverter record from the query.
func (q inverterQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Inverter, error) {
	o := &Inverter{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for inverters")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Inverter records from the query.
func (q inverterQuery) All(ctx context.Context, exec boil.ContextExecutor) (InverterSlice, error) {
	var o []*Inverter

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Inverter slice")
	}

	if len(inverterAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Inverter records in the query.
func (q inverterQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count inverters rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q inverterQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if inverters exists")
	}

	return count > 0, nil
}

// CreatedByUser pointed to by the foreign key.
func (o *Inverter) CreatedByUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CreatedBy),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Project pointed to by the foreign key.
func (o *Inverter) Project(mods ...qm.QueryMod) projectQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProjectID),
	}

	queryMods = append(queryMods, mods...)

	return Projects(queryMods...)
}

// Trackers retrieves all the tracker's Trackers with an executor.
func (o *Inverter) Trackers(mods ...qm.QueryMod) trackerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"trackers\".\"inverter_id\"=?", o.ID),
	)

	return Trackers(queryMods...)
}

// LoadCreatedByUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (inverterL) LoadCreatedByUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeInverter interface{}, mods queries.Applicator) error {
	var slice []*Inverter
	var object *Inverter

	if singular {
		var ok bool
		object, ok = maybeInverter.(*Inverter)
		if !ok {
			object = new(Inverter)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeInverter)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeInverter))
			}
		}
	} else {
		s, ok := maybeInverter.(*[]*Inverter)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeInverter)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeInverter))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &inverterR{}
		}
		args = append(args, object.CreatedBy)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &inverterR{}
			}

			for _, a := range args {
				if a == obj.CreatedBy {
					continue Outer
				}
			}

			args = append(args, obj.CreatedBy)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(inverterAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CreatedByUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CreatedByInverters = append(foreign.R.CreatedByInverters, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CreatedBy == foreign.ID {
				local.R.CreatedByUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CreatedByInverters = append(foreign.R.CreatedByInverters, local)
				break
			}
		}
	}

	return nil
}

// LoadProject allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (inverterL) LoadProject(ctx context.Context, e boil.ContextExecutor, singular bool, maybeInverter interface{}, mods queries.Applicator) error {
	var slice []*Inverter
	var object *Inverter

	if singular {
		var ok bool
		object, ok = maybeInverter.(*Inverter)
		if !ok {
			object = new(Inverter)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeInverter)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeInverter))
			}
		}
	} else {
		s, ok := maybeInverter.(*[]*Inverter)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeInverter)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeInverter))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &inverterR{}
		}
		args = append(args, object.ProjectID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &inverterR{}
			}

			for _, a := range args {
				if a == obj.ProjectID {
					continue Outer
				}
			}

			args = append(args, obj.ProjectID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`projects`),
		qm.WhereIn(`projects.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Project")
	}

	var resultSlice []*Project
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Project")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for projects")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for projects")
	}

	if len(inverterAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Project = foreign
		if foreign.R == nil {
			foreign.R = &projectR{}
		}
		foreign.R.Inverters = append(foreign.R.Inverters, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProjectID == foreign.ID {
				local.R.Project = foreign
				if foreign.R == nil {
					foreign.R = &projectR{}
				}
				foreign.R.Inverters = append(foreign.R.Inverters, local)
				break
			}
		}
	}

	return nil
}

// LoadTrackers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (inverterL) LoadTrackers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeInverter interface{}, mods queries.Applicator) error {
	var slice []*Inverter
	var object *Inverter

	if singular {
		var ok bool
		object, ok = maybeInverter.(*Inverter)
		if !ok {
			object = new(Inverter)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeInverter)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeInverter))
			}
		}
	} else {
		s, ok := maybeInverter.(*[]*Inverter)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeInverter)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeInverter))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &inverterR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &inverterR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`trackers`),
		qm.WhereIn(`trackers.inverter_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load trackers")
	}

	var resultSlice []*Tracker
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice trackers")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on trackers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for trackers")
	}

	if len(trackerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Trackers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &trackerR{}
			}
			foreign.R.Inverter = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.InverterID {
				local.R.Trackers = append(local.R.Trackers, foreign)
				if foreign.R == nil {
					foreign.R = &trackerR{}
				}
				foreign.R.Inverter = local
				break
			}
		}
	}

	return nil
}

// SetCreatedByUser of the inverter to the related item.
// Sets o.R.CreatedByUser to related.
// Adds o to related.R.CreatedByInverters.
func (o *Inverter) SetCreatedByUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"inverters\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"created_by"}),
		strmangle.WhereClause("\"", "\"", 2, inverterPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CreatedBy = related.ID
	if o.R == nil {
		o.R = &inverterR{
			CreatedByUser: related,
		}
	} else {
		o.R.CreatedByUser = related
	}

	if related.R == nil {
		related.R = &userR{
			CreatedByInverters: InverterSlice{o},
		}
	} else {
		related.R.CreatedByInverters = append(related.R.CreatedByInverters, o)
	}

	return nil
}

// SetProject of the inverter to the related item.
// Sets o.R.Project to related.
// Adds o to related.R.Inverters.
func (o *Inverter) SetProject(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Project) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"inverters\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"project_id"}),
		strmangle.WhereClause("\"", "\"", 2, inverterPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProjectID = related.ID
	if o.R == nil {
		o.R = &inverterR{
			Project: related,
		}
	} else {
		o.R.Project = related
	}

	if related.R == nil {
		related.R = &projectR{
			Inverters: InverterSlice{o},
		}
	} else {
		related.R.Inverters = append(related.R.Inverters, o)
	}

	return nil
}

// AddTrackers adds the given related objects to the existing relationships
// of the inverter, optionally inserting them as new records.
// Appends related to o.R.Trackers.
// Sets related.R.Inverter appropriately.
func (o *Inverter) AddTrackers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Tracker) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.InverterID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"trackers\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"inverter_id"}),
				strmangle.WhereClause("\"", "\"", 2, trackerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.InverterID = o.ID
		}
	}

	if o.R == nil {
		o.R = &inverterR{
			Trackers: related,
		}
	} else {
		o.R.Trackers = append(o.R.Trackers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &trackerR{
				Inverter: o,
			}
		} else {
			rel.R.Inverter = o
		}
	}
	return nil
}

// Inverters retrieves all the records using an executor.
func Inverters(mods ...qm.QueryMod) inverterQuery {
	mods = append(mods, qm.From("\"inverters\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"inverters\".*"})
	}

	return inverterQuery{q}
}

// FindInverter retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindInverter(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Inverter, error) {
	inverterObj := &Inverter{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"inverters\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, inverterObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from inverters")
	}

	if err = inverterObj.doAfterSelectHooks(ctx, exec); err != nil {
		return inverterObj, err
	}

	return inverterObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Inverter) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no inverters provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(inverterColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	inverterInsertCacheMut.RLock()
	cache, cached := inverterInsertCache[key]
	inverterInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			inverterAllColumns,
			inverterColumnsWithDefault,
			inverterColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(inverterType, inverterMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(inverterType, inverterMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"inverters\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"inverters\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into inverters")
	}

	if !cached {
		inverterInsertCacheMut.Lock()
		inverterInsertCache[key] = cache
		inverterInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Inverter.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Inverter) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	inverterUpdateCacheMut.RLock()
	cache, cached := inverterUpdateCache[key]
	inverterUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			inverterAllColumns,
			inverterPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update inverters, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"inverters\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, inverterPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(inverterType, inverterMapping, append(wl, inverterPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update inverters row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for inverters")
	}

	if !cached {
		inverterUpdateCacheMut.Lock()
		inverterUpdateCache[key] = cache
		inverterUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q inverterQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for inverters")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for inverters")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o InverterSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), inverterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"inverters\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, inverterPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in inverter slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all inverter")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Inverter) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no inverters provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(inverterColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	inverterUpsertCacheMut.RLock()
	cache, cached := inverterUpsertCache[key]
	inverterUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			inverterAllColumns,
			inverterColumnsWithDefault,
			inverterColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			inverterAllColumns,
			inverterPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert inverters, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(inverterPrimaryKeyColumns))
			copy(conflict, inverterPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"inverters\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(inverterType, inverterMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(inverterType, inverterMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert inverters")
	}

	if !cached {
		inverterUpsertCacheMut.Lock()
		inverterUpsertCache[key] = cache
		inverterUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Inverter record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Inverter) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Inverter provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), inverterPrimaryKeyMapping)
	sql := "DELETE FROM \"inverters\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from inverters")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for inverters")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q inverterQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no inverterQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from inverters")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for inverters")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o InverterSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(inverterBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), inverterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"inverters\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, inverterPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from inverter slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for inverters")
	}

	if len(inverterAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Inverter) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindInverter(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *InverterSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := InverterSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), inverterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"inverters\".* FROM \"inverters\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, inverterPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in InverterSlice")
	}

	*o = slice

	return nil
}

// InverterExists checks if the Inverter row exists.
func InverterExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"inverters\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if inverters exists")
	}

	return exists, nil
}
