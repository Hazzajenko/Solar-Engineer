// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// String is an object representing the database table.
type String struct {
	ID           int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	ProjectID    int64     `boil:"project_id" json:"project_id" toml:"project_id" yaml:"project_id"`
	InverterID   int64     `boil:"inverter_id" json:"inverter_id" toml:"inverter_id" yaml:"inverter_id"`
	TrackerID    int64     `boil:"tracker_id" json:"tracker_id" toml:"tracker_id" yaml:"tracker_id"`
	Name         string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	CreatedAt    time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	CreatedBy    int64     `boil:"created_by" json:"created_by" toml:"created_by" yaml:"created_by"`
	IsInParallel bool      `boil:"is_in_parallel" json:"is_in_parallel" toml:"is_in_parallel" yaml:"is_in_parallel"`
	PanelAmount  int64     `boil:"panel_amount" json:"panel_amount" toml:"panel_amount" yaml:"panel_amount"`
	Version      int       `boil:"version" json:"version" toml:"version" yaml:"version"`
	Model        int       `boil:"model" json:"model" toml:"model" yaml:"model"`
	Color        string    `boil:"color" json:"color" toml:"color" yaml:"color"`
	Type         string    `boil:"type" json:"type" toml:"type" yaml:"type"`

	R *stringR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L stringL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StringColumns = struct {
	ID           string
	ProjectID    string
	InverterID   string
	TrackerID    string
	Name         string
	CreatedAt    string
	CreatedBy    string
	IsInParallel string
	PanelAmount  string
	Version      string
	Model        string
	Color        string
	Type         string
}{
	ID:           "id",
	ProjectID:    "project_id",
	InverterID:   "inverter_id",
	TrackerID:    "tracker_id",
	Name:         "name",
	CreatedAt:    "created_at",
	CreatedBy:    "created_by",
	IsInParallel: "is_in_parallel",
	PanelAmount:  "panel_amount",
	Version:      "version",
	Model:        "model",
	Color:        "color",
	Type:         "type",
}

var StringTableColumns = struct {
	ID           string
	ProjectID    string
	InverterID   string
	TrackerID    string
	Name         string
	CreatedAt    string
	CreatedBy    string
	IsInParallel string
	PanelAmount  string
	Version      string
	Model        string
	Color        string
	Type         string
}{
	ID:           "strings.id",
	ProjectID:    "strings.project_id",
	InverterID:   "strings.inverter_id",
	TrackerID:    "strings.tracker_id",
	Name:         "strings.name",
	CreatedAt:    "strings.created_at",
	CreatedBy:    "strings.created_by",
	IsInParallel: "strings.is_in_parallel",
	PanelAmount:  "strings.panel_amount",
	Version:      "strings.version",
	Model:        "strings.model",
	Color:        "strings.color",
	Type:         "strings.type",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var StringWhere = struct {
	ID           whereHelperint64
	ProjectID    whereHelperint64
	InverterID   whereHelperint64
	TrackerID    whereHelperint64
	Name         whereHelperstring
	CreatedAt    whereHelpertime_Time
	CreatedBy    whereHelperint64
	IsInParallel whereHelperbool
	PanelAmount  whereHelperint64
	Version      whereHelperint
	Model        whereHelperint
	Color        whereHelperstring
	Type         whereHelperstring
}{
	ID:           whereHelperint64{field: "\"strings\".\"id\""},
	ProjectID:    whereHelperint64{field: "\"strings\".\"project_id\""},
	InverterID:   whereHelperint64{field: "\"strings\".\"inverter_id\""},
	TrackerID:    whereHelperint64{field: "\"strings\".\"tracker_id\""},
	Name:         whereHelperstring{field: "\"strings\".\"name\""},
	CreatedAt:    whereHelpertime_Time{field: "\"strings\".\"created_at\""},
	CreatedBy:    whereHelperint64{field: "\"strings\".\"created_by\""},
	IsInParallel: whereHelperbool{field: "\"strings\".\"is_in_parallel\""},
	PanelAmount:  whereHelperint64{field: "\"strings\".\"panel_amount\""},
	Version:      whereHelperint{field: "\"strings\".\"version\""},
	Model:        whereHelperint{field: "\"strings\".\"model\""},
	Color:        whereHelperstring{field: "\"strings\".\"color\""},
	Type:         whereHelperstring{field: "\"strings\".\"type\""},
}

// StringRels is where relationship names are stored.
var StringRels = struct {
	CreatedByUser string
	Inverter      string
	Project       string
	Tracker       string
	Panels        string
}{
	CreatedByUser: "CreatedByUser",
	Inverter:      "Inverter",
	Project:       "Project",
	Tracker:       "Tracker",
	Panels:        "Panels",
}

// stringR is where relationships are stored.
type stringR struct {
	CreatedByUser *User      `boil:"CreatedByUser" json:"CreatedByUser" toml:"CreatedByUser" yaml:"CreatedByUser"`
	Inverter      *Inverter  `boil:"Inverter" json:"Inverter" toml:"Inverter" yaml:"Inverter"`
	Project       *Project   `boil:"Project" json:"Project" toml:"Project" yaml:"Project"`
	Tracker       *Tracker   `boil:"Tracker" json:"Tracker" toml:"Tracker" yaml:"Tracker"`
	Panels        PanelSlice `boil:"Panels" json:"Panels" toml:"Panels" yaml:"Panels"`
}

// NewStruct creates a new relationship struct
func (*stringR) NewStruct() *stringR {
	return &stringR{}
}

func (r *stringR) GetCreatedByUser() *User {
	if r == nil {
		return nil
	}
	return r.CreatedByUser
}

func (r *stringR) GetInverter() *Inverter {
	if r == nil {
		return nil
	}
	return r.Inverter
}

func (r *stringR) GetProject() *Project {
	if r == nil {
		return nil
	}
	return r.Project
}

func (r *stringR) GetTracker() *Tracker {
	if r == nil {
		return nil
	}
	return r.Tracker
}

func (r *stringR) GetPanels() PanelSlice {
	if r == nil {
		return nil
	}
	return r.Panels
}

// stringL is where Load methods for each relationship are stored.
type stringL struct{}

var (
	stringAllColumns            = []string{"id", "project_id", "inverter_id", "tracker_id", "name", "created_at", "created_by", "is_in_parallel", "panel_amount", "version", "model", "color", "type"}
	stringColumnsWithoutDefault = []string{"project_id", "inverter_id", "tracker_id", "name"}
	stringColumnsWithDefault    = []string{"id", "created_at", "created_by", "is_in_parallel", "panel_amount", "version", "model", "color", "type"}
	stringPrimaryKeyColumns     = []string{"id"}
	stringGeneratedColumns      = []string{}
)

type (
	// StringSlice is an alias for a slice of pointers to String.
	// This should almost always be used instead of []String.
	StringSlice []*String
	// StringHook is the signature for custom String hook methods
	StringHook func(context.Context, boil.ContextExecutor, *String) error

	stringQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	stringType                 = reflect.TypeOf(&String{})
	stringMapping              = queries.MakeStructMapping(stringType)
	stringPrimaryKeyMapping, _ = queries.BindMapping(stringType, stringMapping, stringPrimaryKeyColumns)
	stringInsertCacheMut       sync.RWMutex
	stringInsertCache          = make(map[string]insertCache)
	stringUpdateCacheMut       sync.RWMutex
	stringUpdateCache          = make(map[string]updateCache)
	stringUpsertCacheMut       sync.RWMutex
	stringUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var stringAfterSelectHooks []StringHook

var stringBeforeInsertHooks []StringHook
var stringAfterInsertHooks []StringHook

var stringBeforeUpdateHooks []StringHook
var stringAfterUpdateHooks []StringHook

var stringBeforeDeleteHooks []StringHook
var stringAfterDeleteHooks []StringHook

var stringBeforeUpsertHooks []StringHook
var stringAfterUpsertHooks []StringHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *String) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stringAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *String) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stringBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *String) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stringAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *String) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stringBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *String) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stringAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *String) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stringBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *String) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stringAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *String) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stringBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *String) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stringAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStringHook registers your hook function for all future operations.
func AddStringHook(hookPoint boil.HookPoint, stringHook StringHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		stringAfterSelectHooks = append(stringAfterSelectHooks, stringHook)
	case boil.BeforeInsertHook:
		stringBeforeInsertHooks = append(stringBeforeInsertHooks, stringHook)
	case boil.AfterInsertHook:
		stringAfterInsertHooks = append(stringAfterInsertHooks, stringHook)
	case boil.BeforeUpdateHook:
		stringBeforeUpdateHooks = append(stringBeforeUpdateHooks, stringHook)
	case boil.AfterUpdateHook:
		stringAfterUpdateHooks = append(stringAfterUpdateHooks, stringHook)
	case boil.BeforeDeleteHook:
		stringBeforeDeleteHooks = append(stringBeforeDeleteHooks, stringHook)
	case boil.AfterDeleteHook:
		stringAfterDeleteHooks = append(stringAfterDeleteHooks, stringHook)
	case boil.BeforeUpsertHook:
		stringBeforeUpsertHooks = append(stringBeforeUpsertHooks, stringHook)
	case boil.AfterUpsertHook:
		stringAfterUpsertHooks = append(stringAfterUpsertHooks, stringHook)
	}
}

// One returns a single string record from the query.
func (q stringQuery) One(ctx context.Context, exec boil.ContextExecutor) (*String, error) {
	o := &String{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for strings")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all String records from the query.
func (q stringQuery) All(ctx context.Context, exec boil.ContextExecutor) (StringSlice, error) {
	var o []*String

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to String slice")
	}

	if len(stringAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all String records in the query.
func (q stringQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count strings rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q stringQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if strings exists")
	}

	return count > 0, nil
}

// CreatedByUser pointed to by the foreign key.
func (o *String) CreatedByUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CreatedBy),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Inverter pointed to by the foreign key.
func (o *String) Inverter(mods ...qm.QueryMod) inverterQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.InverterID),
	}

	queryMods = append(queryMods, mods...)

	return Inverters(queryMods...)
}

// Project pointed to by the foreign key.
func (o *String) Project(mods ...qm.QueryMod) projectQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProjectID),
	}

	queryMods = append(queryMods, mods...)

	return Projects(queryMods...)
}

// Tracker pointed to by the foreign key.
func (o *String) Tracker(mods ...qm.QueryMod) trackerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TrackerID),
	}

	queryMods = append(queryMods, mods...)

	return Trackers(queryMods...)
}

// Panels retrieves all the panel's Panels with an executor.
func (o *String) Panels(mods ...qm.QueryMod) panelQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"panels\".\"string_id\"=?", o.ID),
	)

	return Panels(queryMods...)
}

// LoadCreatedByUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (stringL) LoadCreatedByUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeString interface{}, mods queries.Applicator) error {
	var slice []*String
	var object *String

	if singular {
		var ok bool
		object, ok = maybeString.(*String)
		if !ok {
			object = new(String)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeString)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeString))
			}
		}
	} else {
		s, ok := maybeString.(*[]*String)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeString)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeString))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &stringR{}
		}
		args = append(args, object.CreatedBy)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stringR{}
			}

			for _, a := range args {
				if a == obj.CreatedBy {
					continue Outer
				}
			}

			args = append(args, obj.CreatedBy)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(stringAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CreatedByUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CreatedByStrings = append(foreign.R.CreatedByStrings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CreatedBy == foreign.ID {
				local.R.CreatedByUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CreatedByStrings = append(foreign.R.CreatedByStrings, local)
				break
			}
		}
	}

	return nil
}

// LoadInverter allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (stringL) LoadInverter(ctx context.Context, e boil.ContextExecutor, singular bool, maybeString interface{}, mods queries.Applicator) error {
	var slice []*String
	var object *String

	if singular {
		var ok bool
		object, ok = maybeString.(*String)
		if !ok {
			object = new(String)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeString)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeString))
			}
		}
	} else {
		s, ok := maybeString.(*[]*String)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeString)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeString))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &stringR{}
		}
		args = append(args, object.InverterID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stringR{}
			}

			for _, a := range args {
				if a == obj.InverterID {
					continue Outer
				}
			}

			args = append(args, obj.InverterID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`inverters`),
		qm.WhereIn(`inverters.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Inverter")
	}

	var resultSlice []*Inverter
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Inverter")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for inverters")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for inverters")
	}

	if len(stringAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Inverter = foreign
		if foreign.R == nil {
			foreign.R = &inverterR{}
		}
		foreign.R.Strings = append(foreign.R.Strings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.InverterID == foreign.ID {
				local.R.Inverter = foreign
				if foreign.R == nil {
					foreign.R = &inverterR{}
				}
				foreign.R.Strings = append(foreign.R.Strings, local)
				break
			}
		}
	}

	return nil
}

// LoadProject allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (stringL) LoadProject(ctx context.Context, e boil.ContextExecutor, singular bool, maybeString interface{}, mods queries.Applicator) error {
	var slice []*String
	var object *String

	if singular {
		var ok bool
		object, ok = maybeString.(*String)
		if !ok {
			object = new(String)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeString)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeString))
			}
		}
	} else {
		s, ok := maybeString.(*[]*String)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeString)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeString))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &stringR{}
		}
		args = append(args, object.ProjectID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stringR{}
			}

			for _, a := range args {
				if a == obj.ProjectID {
					continue Outer
				}
			}

			args = append(args, obj.ProjectID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`projects`),
		qm.WhereIn(`projects.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Project")
	}

	var resultSlice []*Project
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Project")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for projects")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for projects")
	}

	if len(stringAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Project = foreign
		if foreign.R == nil {
			foreign.R = &projectR{}
		}
		foreign.R.Strings = append(foreign.R.Strings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProjectID == foreign.ID {
				local.R.Project = foreign
				if foreign.R == nil {
					foreign.R = &projectR{}
				}
				foreign.R.Strings = append(foreign.R.Strings, local)
				break
			}
		}
	}

	return nil
}

// LoadTracker allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (stringL) LoadTracker(ctx context.Context, e boil.ContextExecutor, singular bool, maybeString interface{}, mods queries.Applicator) error {
	var slice []*String
	var object *String

	if singular {
		var ok bool
		object, ok = maybeString.(*String)
		if !ok {
			object = new(String)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeString)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeString))
			}
		}
	} else {
		s, ok := maybeString.(*[]*String)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeString)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeString))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &stringR{}
		}
		args = append(args, object.TrackerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stringR{}
			}

			for _, a := range args {
				if a == obj.TrackerID {
					continue Outer
				}
			}

			args = append(args, obj.TrackerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`trackers`),
		qm.WhereIn(`trackers.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Tracker")
	}

	var resultSlice []*Tracker
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Tracker")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for trackers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for trackers")
	}

	if len(stringAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Tracker = foreign
		if foreign.R == nil {
			foreign.R = &trackerR{}
		}
		foreign.R.Strings = append(foreign.R.Strings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TrackerID == foreign.ID {
				local.R.Tracker = foreign
				if foreign.R == nil {
					foreign.R = &trackerR{}
				}
				foreign.R.Strings = append(foreign.R.Strings, local)
				break
			}
		}
	}

	return nil
}

// LoadPanels allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (stringL) LoadPanels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeString interface{}, mods queries.Applicator) error {
	var slice []*String
	var object *String

	if singular {
		var ok bool
		object, ok = maybeString.(*String)
		if !ok {
			object = new(String)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeString)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeString))
			}
		}
	} else {
		s, ok := maybeString.(*[]*String)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeString)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeString))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &stringR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stringR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`panels`),
		qm.WhereIn(`panels.string_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load panels")
	}

	var resultSlice []*Panel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice panels")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on panels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for panels")
	}

	if len(panelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Panels = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &panelR{}
			}
			foreign.R.String = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.StringID {
				local.R.Panels = append(local.R.Panels, foreign)
				if foreign.R == nil {
					foreign.R = &panelR{}
				}
				foreign.R.String = local
				break
			}
		}
	}

	return nil
}

// SetCreatedByUser of the string to the related item.
// Sets o.R.CreatedByUser to related.
// Adds o to related.R.CreatedByStrings.
func (o *String) SetCreatedByUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"strings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"created_by"}),
		strmangle.WhereClause("\"", "\"", 2, stringPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CreatedBy = related.ID
	if o.R == nil {
		o.R = &stringR{
			CreatedByUser: related,
		}
	} else {
		o.R.CreatedByUser = related
	}

	if related.R == nil {
		related.R = &userR{
			CreatedByStrings: StringSlice{o},
		}
	} else {
		related.R.CreatedByStrings = append(related.R.CreatedByStrings, o)
	}

	return nil
}

// SetInverter of the string to the related item.
// Sets o.R.Inverter to related.
// Adds o to related.R.Strings.
func (o *String) SetInverter(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Inverter) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"strings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"inverter_id"}),
		strmangle.WhereClause("\"", "\"", 2, stringPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.InverterID = related.ID
	if o.R == nil {
		o.R = &stringR{
			Inverter: related,
		}
	} else {
		o.R.Inverter = related
	}

	if related.R == nil {
		related.R = &inverterR{
			Strings: StringSlice{o},
		}
	} else {
		related.R.Strings = append(related.R.Strings, o)
	}

	return nil
}

// SetProject of the string to the related item.
// Sets o.R.Project to related.
// Adds o to related.R.Strings.
func (o *String) SetProject(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Project) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"strings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"project_id"}),
		strmangle.WhereClause("\"", "\"", 2, stringPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProjectID = related.ID
	if o.R == nil {
		o.R = &stringR{
			Project: related,
		}
	} else {
		o.R.Project = related
	}

	if related.R == nil {
		related.R = &projectR{
			Strings: StringSlice{o},
		}
	} else {
		related.R.Strings = append(related.R.Strings, o)
	}

	return nil
}

// SetTracker of the string to the related item.
// Sets o.R.Tracker to related.
// Adds o to related.R.Strings.
func (o *String) SetTracker(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Tracker) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"strings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"tracker_id"}),
		strmangle.WhereClause("\"", "\"", 2, stringPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TrackerID = related.ID
	if o.R == nil {
		o.R = &stringR{
			Tracker: related,
		}
	} else {
		o.R.Tracker = related
	}

	if related.R == nil {
		related.R = &trackerR{
			Strings: StringSlice{o},
		}
	} else {
		related.R.Strings = append(related.R.Strings, o)
	}

	return nil
}

// AddPanels adds the given related objects to the existing relationships
// of the string, optionally inserting them as new records.
// Appends related to o.R.Panels.
// Sets related.R.String appropriately.
func (o *String) AddPanels(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Panel) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.StringID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"panels\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"string_id"}),
				strmangle.WhereClause("\"", "\"", 2, panelPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.StringID = o.ID
		}
	}

	if o.R == nil {
		o.R = &stringR{
			Panels: related,
		}
	} else {
		o.R.Panels = append(o.R.Panels, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &panelR{
				String: o,
			}
		} else {
			rel.R.String = o
		}
	}
	return nil
}

// Strings retrieves all the records using an executor.
func Strings(mods ...qm.QueryMod) stringQuery {
	mods = append(mods, qm.From("\"strings\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"strings\".*"})
	}

	return stringQuery{q}
}

// FindString retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindString(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*String, error) {
	stringObj := &String{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"strings\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, stringObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from strings")
	}

	if err = stringObj.doAfterSelectHooks(ctx, exec); err != nil {
		return stringObj, err
	}

	return stringObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *String) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no strings provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(stringColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	stringInsertCacheMut.RLock()
	cache, cached := stringInsertCache[key]
	stringInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			stringAllColumns,
			stringColumnsWithDefault,
			stringColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(stringType, stringMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(stringType, stringMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"strings\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"strings\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into strings")
	}

	if !cached {
		stringInsertCacheMut.Lock()
		stringInsertCache[key] = cache
		stringInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the String.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *String) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	stringUpdateCacheMut.RLock()
	cache, cached := stringUpdateCache[key]
	stringUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			stringAllColumns,
			stringPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update strings, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"strings\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, stringPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(stringType, stringMapping, append(wl, stringPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update strings row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for strings")
	}

	if !cached {
		stringUpdateCacheMut.Lock()
		stringUpdateCache[key] = cache
		stringUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q stringQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for strings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for strings")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StringSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stringPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"strings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, stringPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in string slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all string")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *String) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no strings provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(stringColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	stringUpsertCacheMut.RLock()
	cache, cached := stringUpsertCache[key]
	stringUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			stringAllColumns,
			stringColumnsWithDefault,
			stringColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			stringAllColumns,
			stringPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert strings, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(stringPrimaryKeyColumns))
			copy(conflict, stringPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"strings\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(stringType, stringMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(stringType, stringMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert strings")
	}

	if !cached {
		stringUpsertCacheMut.Lock()
		stringUpsertCache[key] = cache
		stringUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single String record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *String) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no String provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), stringPrimaryKeyMapping)
	sql := "DELETE FROM \"strings\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from strings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for strings")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q stringQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no stringQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from strings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for strings")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StringSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(stringBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stringPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"strings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, stringPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from string slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for strings")
	}

	if len(stringAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *String) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindString(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StringSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StringSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stringPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"strings\".* FROM \"strings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, stringPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in StringSlice")
	}

	*o = slice

	return nil
}

// StringExists checks if the String row exists.
func StringExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"strings\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if strings exists")
	}

	return exists, nil
}
