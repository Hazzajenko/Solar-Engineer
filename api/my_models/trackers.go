// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Tracker is an object representing the database table.
type Tracker struct {
	ID                     int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	ProjectID              int64     `boil:"project_id" json:"project_id" toml:"project_id" yaml:"project_id"`
	InverterID             int64     `boil:"inverter_id" json:"inverter_id" toml:"inverter_id" yaml:"inverter_id"`
	Name                   string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	CreatedAt              time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	CreatedBy              int64     `boil:"created_by" json:"created_by" toml:"created_by" yaml:"created_by"`
	MaxInputCurrent        int64     `boil:"max_input_current" json:"max_input_current" toml:"max_input_current" yaml:"max_input_current"`
	MaxShortCircuitCurrent int64     `boil:"max_short_circuit_current" json:"max_short_circuit_current" toml:"max_short_circuit_current" yaml:"max_short_circuit_current"`
	StringAmount           int64     `boil:"string_amount" json:"string_amount" toml:"string_amount" yaml:"string_amount"`
	ParallelAmount         int64     `boil:"parallel_amount" json:"parallel_amount" toml:"parallel_amount" yaml:"parallel_amount"`
	PanelAmount            int64     `boil:"panel_amount" json:"panel_amount" toml:"panel_amount" yaml:"panel_amount"`
	Version                int       `boil:"version" json:"version" toml:"version" yaml:"version"`
	Model                  int       `boil:"model" json:"model" toml:"model" yaml:"model"`
	Type                   string    `boil:"type" json:"type" toml:"type" yaml:"type"`

	R *trackerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L trackerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TrackerColumns = struct {
	ID                     string
	ProjectID              string
	InverterID             string
	Name                   string
	CreatedAt              string
	CreatedBy              string
	MaxInputCurrent        string
	MaxShortCircuitCurrent string
	StringAmount           string
	ParallelAmount         string
	PanelAmount            string
	Version                string
	Model                  string
	Type                   string
}{
	ID:                     "id",
	ProjectID:              "project_id",
	InverterID:             "inverter_id",
	Name:                   "name",
	CreatedAt:              "created_at",
	CreatedBy:              "created_by",
	MaxInputCurrent:        "max_input_current",
	MaxShortCircuitCurrent: "max_short_circuit_current",
	StringAmount:           "string_amount",
	ParallelAmount:         "parallel_amount",
	PanelAmount:            "panel_amount",
	Version:                "version",
	Model:                  "model",
	Type:                   "type",
}

var TrackerTableColumns = struct {
	ID                     string
	ProjectID              string
	InverterID             string
	Name                   string
	CreatedAt              string
	CreatedBy              string
	MaxInputCurrent        string
	MaxShortCircuitCurrent string
	StringAmount           string
	ParallelAmount         string
	PanelAmount            string
	Version                string
	Model                  string
	Type                   string
}{
	ID:                     "trackers.id",
	ProjectID:              "trackers.project_id",
	InverterID:             "trackers.inverter_id",
	Name:                   "trackers.name",
	CreatedAt:              "trackers.created_at",
	CreatedBy:              "trackers.created_by",
	MaxInputCurrent:        "trackers.max_input_current",
	MaxShortCircuitCurrent: "trackers.max_short_circuit_current",
	StringAmount:           "trackers.string_amount",
	ParallelAmount:         "trackers.parallel_amount",
	PanelAmount:            "trackers.panel_amount",
	Version:                "trackers.version",
	Model:                  "trackers.model",
	Type:                   "trackers.type",
}

// Generated where

var TrackerWhere = struct {
	ID                     whereHelperint64
	ProjectID              whereHelperint64
	InverterID             whereHelperint64
	Name                   whereHelperstring
	CreatedAt              whereHelpertime_Time
	CreatedBy              whereHelperint64
	MaxInputCurrent        whereHelperint64
	MaxShortCircuitCurrent whereHelperint64
	StringAmount           whereHelperint64
	ParallelAmount         whereHelperint64
	PanelAmount            whereHelperint64
	Version                whereHelperint
	Model                  whereHelperint
	Type                   whereHelperstring
}{
	ID:                     whereHelperint64{field: "\"trackers\".\"id\""},
	ProjectID:              whereHelperint64{field: "\"trackers\".\"project_id\""},
	InverterID:             whereHelperint64{field: "\"trackers\".\"inverter_id\""},
	Name:                   whereHelperstring{field: "\"trackers\".\"name\""},
	CreatedAt:              whereHelpertime_Time{field: "\"trackers\".\"created_at\""},
	CreatedBy:              whereHelperint64{field: "\"trackers\".\"created_by\""},
	MaxInputCurrent:        whereHelperint64{field: "\"trackers\".\"max_input_current\""},
	MaxShortCircuitCurrent: whereHelperint64{field: "\"trackers\".\"max_short_circuit_current\""},
	StringAmount:           whereHelperint64{field: "\"trackers\".\"string_amount\""},
	ParallelAmount:         whereHelperint64{field: "\"trackers\".\"parallel_amount\""},
	PanelAmount:            whereHelperint64{field: "\"trackers\".\"panel_amount\""},
	Version:                whereHelperint{field: "\"trackers\".\"version\""},
	Model:                  whereHelperint{field: "\"trackers\".\"model\""},
	Type:                   whereHelperstring{field: "\"trackers\".\"type\""},
}

// TrackerRels is where relationship names are stored.
var TrackerRels = struct {
	CreatedByUser string
	Inverter      string
	Project       string
	Panels        string
	Strings       string
}{
	CreatedByUser: "CreatedByUser",
	Inverter:      "Inverter",
	Project:       "Project",
	Panels:        "Panels",
	Strings:       "Strings",
}

// trackerR is where relationships are stored.
type trackerR struct {
	CreatedByUser *User       `boil:"CreatedByUser" json:"CreatedByUser" toml:"CreatedByUser" yaml:"CreatedByUser"`
	Inverter      *Inverter   `boil:"Inverter" json:"Inverter" toml:"Inverter" yaml:"Inverter"`
	Project       *Project    `boil:"Project" json:"Project" toml:"Project" yaml:"Project"`
	Panels        PanelSlice  `boil:"Panels" json:"Panels" toml:"Panels" yaml:"Panels"`
	Strings       StringSlice `boil:"Strings" json:"Strings" toml:"Strings" yaml:"Strings"`
}

// NewStruct creates a new relationship struct
func (*trackerR) NewStruct() *trackerR {
	return &trackerR{}
}

func (r *trackerR) GetCreatedByUser() *User {
	if r == nil {
		return nil
	}
	return r.CreatedByUser
}

func (r *trackerR) GetInverter() *Inverter {
	if r == nil {
		return nil
	}
	return r.Inverter
}

func (r *trackerR) GetProject() *Project {
	if r == nil {
		return nil
	}
	return r.Project
}

func (r *trackerR) GetPanels() PanelSlice {
	if r == nil {
		return nil
	}
	return r.Panels
}

func (r *trackerR) GetStrings() StringSlice {
	if r == nil {
		return nil
	}
	return r.Strings
}

// trackerL is where Load methods for each relationship are stored.
type trackerL struct{}

var (
	trackerAllColumns            = []string{"id", "project_id", "inverter_id", "name", "created_at", "created_by", "max_input_current", "max_short_circuit_current", "string_amount", "parallel_amount", "panel_amount", "version", "model", "type"}
	trackerColumnsWithoutDefault = []string{"project_id", "inverter_id", "name"}
	trackerColumnsWithDefault    = []string{"id", "created_at", "created_by", "max_input_current", "max_short_circuit_current", "string_amount", "parallel_amount", "panel_amount", "version", "model", "type"}
	trackerPrimaryKeyColumns     = []string{"id"}
	trackerGeneratedColumns      = []string{}
)

type (
	// TrackerSlice is an alias for a slice of pointers to Tracker.
	// This should almost always be used instead of []Tracker.
	TrackerSlice []*Tracker
	// TrackerHook is the signature for custom Tracker hook methods
	TrackerHook func(context.Context, boil.ContextExecutor, *Tracker) error

	trackerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	trackerType                 = reflect.TypeOf(&Tracker{})
	trackerMapping              = queries.MakeStructMapping(trackerType)
	trackerPrimaryKeyMapping, _ = queries.BindMapping(trackerType, trackerMapping, trackerPrimaryKeyColumns)
	trackerInsertCacheMut       sync.RWMutex
	trackerInsertCache          = make(map[string]insertCache)
	trackerUpdateCacheMut       sync.RWMutex
	trackerUpdateCache          = make(map[string]updateCache)
	trackerUpsertCacheMut       sync.RWMutex
	trackerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var trackerAfterSelectHooks []TrackerHook

var trackerBeforeInsertHooks []TrackerHook
var trackerAfterInsertHooks []TrackerHook

var trackerBeforeUpdateHooks []TrackerHook
var trackerAfterUpdateHooks []TrackerHook

var trackerBeforeDeleteHooks []TrackerHook
var trackerAfterDeleteHooks []TrackerHook

var trackerBeforeUpsertHooks []TrackerHook
var trackerAfterUpsertHooks []TrackerHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Tracker) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Tracker) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Tracker) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Tracker) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Tracker) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Tracker) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Tracker) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Tracker) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Tracker) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTrackerHook registers your hook function for all future operations.
func AddTrackerHook(hookPoint boil.HookPoint, trackerHook TrackerHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		trackerAfterSelectHooks = append(trackerAfterSelectHooks, trackerHook)
	case boil.BeforeInsertHook:
		trackerBeforeInsertHooks = append(trackerBeforeInsertHooks, trackerHook)
	case boil.AfterInsertHook:
		trackerAfterInsertHooks = append(trackerAfterInsertHooks, trackerHook)
	case boil.BeforeUpdateHook:
		trackerBeforeUpdateHooks = append(trackerBeforeUpdateHooks, trackerHook)
	case boil.AfterUpdateHook:
		trackerAfterUpdateHooks = append(trackerAfterUpdateHooks, trackerHook)
	case boil.BeforeDeleteHook:
		trackerBeforeDeleteHooks = append(trackerBeforeDeleteHooks, trackerHook)
	case boil.AfterDeleteHook:
		trackerAfterDeleteHooks = append(trackerAfterDeleteHooks, trackerHook)
	case boil.BeforeUpsertHook:
		trackerBeforeUpsertHooks = append(trackerBeforeUpsertHooks, trackerHook)
	case boil.AfterUpsertHook:
		trackerAfterUpsertHooks = append(trackerAfterUpsertHooks, trackerHook)
	}
}

// One returns a single tracker record from the query.
func (q trackerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Tracker, error) {
	o := &Tracker{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for trackers")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Tracker records from the query.
func (q trackerQuery) All(ctx context.Context, exec boil.ContextExecutor) (TrackerSlice, error) {
	var o []*Tracker

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Tracker slice")
	}

	if len(trackerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Tracker records in the query.
func (q trackerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count trackers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q trackerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if trackers exists")
	}

	return count > 0, nil
}

// CreatedByUser pointed to by the foreign key.
func (o *Tracker) CreatedByUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CreatedBy),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Inverter pointed to by the foreign key.
func (o *Tracker) Inverter(mods ...qm.QueryMod) inverterQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.InverterID),
	}

	queryMods = append(queryMods, mods...)

	return Inverters(queryMods...)
}

// Project pointed to by the foreign key.
func (o *Tracker) Project(mods ...qm.QueryMod) projectQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProjectID),
	}

	queryMods = append(queryMods, mods...)

	return Projects(queryMods...)
}

// Panels retrieves all the panel's Panels with an executor.
func (o *Tracker) Panels(mods ...qm.QueryMod) panelQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"panels\".\"tracker_id\"=?", o.ID),
	)

	return Panels(queryMods...)
}

// Strings retrieves all the string's Strings with an executor.
func (o *Tracker) Strings(mods ...qm.QueryMod) stringQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"strings\".\"tracker_id\"=?", o.ID),
	)

	return Strings(queryMods...)
}

// LoadCreatedByUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (trackerL) LoadCreatedByUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTracker interface{}, mods queries.Applicator) error {
	var slice []*Tracker
	var object *Tracker

	if singular {
		var ok bool
		object, ok = maybeTracker.(*Tracker)
		if !ok {
			object = new(Tracker)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTracker)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTracker))
			}
		}
	} else {
		s, ok := maybeTracker.(*[]*Tracker)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTracker)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTracker))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &trackerR{}
		}
		args = append(args, object.CreatedBy)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trackerR{}
			}

			for _, a := range args {
				if a == obj.CreatedBy {
					continue Outer
				}
			}

			args = append(args, obj.CreatedBy)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(trackerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CreatedByUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CreatedByTrackers = append(foreign.R.CreatedByTrackers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CreatedBy == foreign.ID {
				local.R.CreatedByUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CreatedByTrackers = append(foreign.R.CreatedByTrackers, local)
				break
			}
		}
	}

	return nil
}

// LoadInverter allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (trackerL) LoadInverter(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTracker interface{}, mods queries.Applicator) error {
	var slice []*Tracker
	var object *Tracker

	if singular {
		var ok bool
		object, ok = maybeTracker.(*Tracker)
		if !ok {
			object = new(Tracker)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTracker)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTracker))
			}
		}
	} else {
		s, ok := maybeTracker.(*[]*Tracker)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTracker)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTracker))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &trackerR{}
		}
		args = append(args, object.InverterID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trackerR{}
			}

			for _, a := range args {
				if a == obj.InverterID {
					continue Outer
				}
			}

			args = append(args, obj.InverterID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`inverters`),
		qm.WhereIn(`inverters.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Inverter")
	}

	var resultSlice []*Inverter
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Inverter")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for inverters")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for inverters")
	}

	if len(trackerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Inverter = foreign
		if foreign.R == nil {
			foreign.R = &inverterR{}
		}
		foreign.R.Trackers = append(foreign.R.Trackers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.InverterID == foreign.ID {
				local.R.Inverter = foreign
				if foreign.R == nil {
					foreign.R = &inverterR{}
				}
				foreign.R.Trackers = append(foreign.R.Trackers, local)
				break
			}
		}
	}

	return nil
}

// LoadProject allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (trackerL) LoadProject(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTracker interface{}, mods queries.Applicator) error {
	var slice []*Tracker
	var object *Tracker

	if singular {
		var ok bool
		object, ok = maybeTracker.(*Tracker)
		if !ok {
			object = new(Tracker)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTracker)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTracker))
			}
		}
	} else {
		s, ok := maybeTracker.(*[]*Tracker)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTracker)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTracker))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &trackerR{}
		}
		args = append(args, object.ProjectID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trackerR{}
			}

			for _, a := range args {
				if a == obj.ProjectID {
					continue Outer
				}
			}

			args = append(args, obj.ProjectID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`projects`),
		qm.WhereIn(`projects.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Project")
	}

	var resultSlice []*Project
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Project")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for projects")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for projects")
	}

	if len(trackerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Project = foreign
		if foreign.R == nil {
			foreign.R = &projectR{}
		}
		foreign.R.Trackers = append(foreign.R.Trackers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProjectID == foreign.ID {
				local.R.Project = foreign
				if foreign.R == nil {
					foreign.R = &projectR{}
				}
				foreign.R.Trackers = append(foreign.R.Trackers, local)
				break
			}
		}
	}

	return nil
}

// LoadPanels allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (trackerL) LoadPanels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTracker interface{}, mods queries.Applicator) error {
	var slice []*Tracker
	var object *Tracker

	if singular {
		var ok bool
		object, ok = maybeTracker.(*Tracker)
		if !ok {
			object = new(Tracker)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTracker)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTracker))
			}
		}
	} else {
		s, ok := maybeTracker.(*[]*Tracker)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTracker)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTracker))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &trackerR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trackerR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`panels`),
		qm.WhereIn(`panels.tracker_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load panels")
	}

	var resultSlice []*Panel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice panels")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on panels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for panels")
	}

	if len(panelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Panels = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &panelR{}
			}
			foreign.R.Tracker = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TrackerID {
				local.R.Panels = append(local.R.Panels, foreign)
				if foreign.R == nil {
					foreign.R = &panelR{}
				}
				foreign.R.Tracker = local
				break
			}
		}
	}

	return nil
}

// LoadStrings allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (trackerL) LoadStrings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTracker interface{}, mods queries.Applicator) error {
	var slice []*Tracker
	var object *Tracker

	if singular {
		var ok bool
		object, ok = maybeTracker.(*Tracker)
		if !ok {
			object = new(Tracker)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTracker)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTracker))
			}
		}
	} else {
		s, ok := maybeTracker.(*[]*Tracker)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTracker)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTracker))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &trackerR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trackerR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`strings`),
		qm.WhereIn(`strings.tracker_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load strings")
	}

	var resultSlice []*String
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice strings")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on strings")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for strings")
	}

	if len(stringAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Strings = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &stringR{}
			}
			foreign.R.Tracker = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TrackerID {
				local.R.Strings = append(local.R.Strings, foreign)
				if foreign.R == nil {
					foreign.R = &stringR{}
				}
				foreign.R.Tracker = local
				break
			}
		}
	}

	return nil
}

// SetCreatedByUser of the tracker to the related item.
// Sets o.R.CreatedByUser to related.
// Adds o to related.R.CreatedByTrackers.
func (o *Tracker) SetCreatedByUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"trackers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"created_by"}),
		strmangle.WhereClause("\"", "\"", 2, trackerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CreatedBy = related.ID
	if o.R == nil {
		o.R = &trackerR{
			CreatedByUser: related,
		}
	} else {
		o.R.CreatedByUser = related
	}

	if related.R == nil {
		related.R = &userR{
			CreatedByTrackers: TrackerSlice{o},
		}
	} else {
		related.R.CreatedByTrackers = append(related.R.CreatedByTrackers, o)
	}

	return nil
}

// SetInverter of the tracker to the related item.
// Sets o.R.Inverter to related.
// Adds o to related.R.Trackers.
func (o *Tracker) SetInverter(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Inverter) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"trackers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"inverter_id"}),
		strmangle.WhereClause("\"", "\"", 2, trackerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.InverterID = related.ID
	if o.R == nil {
		o.R = &trackerR{
			Inverter: related,
		}
	} else {
		o.R.Inverter = related
	}

	if related.R == nil {
		related.R = &inverterR{
			Trackers: TrackerSlice{o},
		}
	} else {
		related.R.Trackers = append(related.R.Trackers, o)
	}

	return nil
}

// SetProject of the tracker to the related item.
// Sets o.R.Project to related.
// Adds o to related.R.Trackers.
func (o *Tracker) SetProject(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Project) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"trackers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"project_id"}),
		strmangle.WhereClause("\"", "\"", 2, trackerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProjectID = related.ID
	if o.R == nil {
		o.R = &trackerR{
			Project: related,
		}
	} else {
		o.R.Project = related
	}

	if related.R == nil {
		related.R = &projectR{
			Trackers: TrackerSlice{o},
		}
	} else {
		related.R.Trackers = append(related.R.Trackers, o)
	}

	return nil
}

// AddPanels adds the given related objects to the existing relationships
// of the tracker, optionally inserting them as new records.
// Appends related to o.R.Panels.
// Sets related.R.Tracker appropriately.
func (o *Tracker) AddPanels(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Panel) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TrackerID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"panels\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"tracker_id"}),
				strmangle.WhereClause("\"", "\"", 2, panelPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TrackerID = o.ID
		}
	}

	if o.R == nil {
		o.R = &trackerR{
			Panels: related,
		}
	} else {
		o.R.Panels = append(o.R.Panels, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &panelR{
				Tracker: o,
			}
		} else {
			rel.R.Tracker = o
		}
	}
	return nil
}

// AddStrings adds the given related objects to the existing relationships
// of the tracker, optionally inserting them as new records.
// Appends related to o.R.Strings.
// Sets related.R.Tracker appropriately.
func (o *Tracker) AddStrings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*String) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TrackerID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"strings\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"tracker_id"}),
				strmangle.WhereClause("\"", "\"", 2, stringPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TrackerID = o.ID
		}
	}

	if o.R == nil {
		o.R = &trackerR{
			Strings: related,
		}
	} else {
		o.R.Strings = append(o.R.Strings, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &stringR{
				Tracker: o,
			}
		} else {
			rel.R.Tracker = o
		}
	}
	return nil
}

// Trackers retrieves all the records using an executor.
func Trackers(mods ...qm.QueryMod) trackerQuery {
	mods = append(mods, qm.From("\"trackers\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"trackers\".*"})
	}

	return trackerQuery{q}
}

// FindTracker retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTracker(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Tracker, error) {
	trackerObj := &Tracker{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"trackers\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, trackerObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from trackers")
	}

	if err = trackerObj.doAfterSelectHooks(ctx, exec); err != nil {
		return trackerObj, err
	}

	return trackerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Tracker) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no trackers provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(trackerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	trackerInsertCacheMut.RLock()
	cache, cached := trackerInsertCache[key]
	trackerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			trackerAllColumns,
			trackerColumnsWithDefault,
			trackerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(trackerType, trackerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(trackerType, trackerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"trackers\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"trackers\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into trackers")
	}

	if !cached {
		trackerInsertCacheMut.Lock()
		trackerInsertCache[key] = cache
		trackerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Tracker.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Tracker) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	trackerUpdateCacheMut.RLock()
	cache, cached := trackerUpdateCache[key]
	trackerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			trackerAllColumns,
			trackerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update trackers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"trackers\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, trackerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(trackerType, trackerMapping, append(wl, trackerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update trackers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for trackers")
	}

	if !cached {
		trackerUpdateCacheMut.Lock()
		trackerUpdateCache[key] = cache
		trackerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q trackerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for trackers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for trackers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TrackerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trackerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"trackers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, trackerPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in tracker slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all tracker")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Tracker) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no trackers provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(trackerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	trackerUpsertCacheMut.RLock()
	cache, cached := trackerUpsertCache[key]
	trackerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			trackerAllColumns,
			trackerColumnsWithDefault,
			trackerColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			trackerAllColumns,
			trackerPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert trackers, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(trackerPrimaryKeyColumns))
			copy(conflict, trackerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"trackers\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(trackerType, trackerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(trackerType, trackerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert trackers")
	}

	if !cached {
		trackerUpsertCacheMut.Lock()
		trackerUpsertCache[key] = cache
		trackerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Tracker record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Tracker) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Tracker provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), trackerPrimaryKeyMapping)
	sql := "DELETE FROM \"trackers\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from trackers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for trackers")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q trackerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no trackerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from trackers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for trackers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TrackerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(trackerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trackerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"trackers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, trackerPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tracker slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for trackers")
	}

	if len(trackerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Tracker) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTracker(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TrackerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TrackerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trackerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"trackers\".* FROM \"trackers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, trackerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TrackerSlice")
	}

	*o = slice

	return nil
}

// TrackerExists checks if the Tracker row exists.
func TrackerExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"trackers\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if trackers exists")
	}

	return exists, nil
}
