// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Cable is an object representing the database table.
type Cable struct {
	ID        string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	ProjectID int64     `boil:"project_id" json:"project_id" toml:"project_id" yaml:"project_id"`
	Model     int       `boil:"model" json:"model" toml:"model" yaml:"model"`
	Location  string    `boil:"location" json:"location" toml:"location" yaml:"location"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	CreatedBy int64     `boil:"created_by" json:"created_by" toml:"created_by" yaml:"created_by"`
	Length    int64     `boil:"length" json:"length" toml:"length" yaml:"length"`
	Weight    float32   `boil:"weight" json:"weight" toml:"weight" yaml:"weight"`
	Version   int       `boil:"version" json:"version" toml:"version" yaml:"version"`
	Size      int64     `boil:"size" json:"size" toml:"size" yaml:"size"`
	Color     string    `boil:"color" json:"color" toml:"color" yaml:"color"`
	Type      string    `boil:"type" json:"type" toml:"type" yaml:"type"`
	JoinID    string    `boil:"join_id" json:"join_id" toml:"join_id" yaml:"join_id"`
	InJoin    bool      `boil:"in_join" json:"in_join" toml:"in_join" yaml:"in_join"`

	R *cableR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cableL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CableColumns = struct {
	ID        string
	ProjectID string
	Model     string
	Location  string
	CreatedAt string
	CreatedBy string
	Length    string
	Weight    string
	Version   string
	Size      string
	Color     string
	Type      string
	JoinID    string
	InJoin    string
}{
	ID:        "id",
	ProjectID: "project_id",
	Model:     "model",
	Location:  "location",
	CreatedAt: "created_at",
	CreatedBy: "created_by",
	Length:    "length",
	Weight:    "weight",
	Version:   "version",
	Size:      "size",
	Color:     "color",
	Type:      "type",
	JoinID:    "join_id",
	InJoin:    "in_join",
}

var CableTableColumns = struct {
	ID        string
	ProjectID string
	Model     string
	Location  string
	CreatedAt string
	CreatedBy string
	Length    string
	Weight    string
	Version   string
	Size      string
	Color     string
	Type      string
	JoinID    string
	InJoin    string
}{
	ID:        "cables.id",
	ProjectID: "cables.project_id",
	Model:     "cables.model",
	Location:  "cables.location",
	CreatedAt: "cables.created_at",
	CreatedBy: "cables.created_by",
	Length:    "cables.length",
	Weight:    "cables.weight",
	Version:   "cables.version",
	Size:      "cables.size",
	Color:     "cables.color",
	Type:      "cables.type",
	JoinID:    "cables.join_id",
	InJoin:    "cables.in_join",
}

// Generated where

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperfloat32 struct{ field string }

func (w whereHelperfloat32) EQ(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat32) NEQ(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat32) LT(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat32) LTE(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat32) GT(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat32) GTE(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperfloat32) IN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperfloat32) NIN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var CableWhere = struct {
	ID        whereHelperstring
	ProjectID whereHelperint64
	Model     whereHelperint
	Location  whereHelperstring
	CreatedAt whereHelpertime_Time
	CreatedBy whereHelperint64
	Length    whereHelperint64
	Weight    whereHelperfloat32
	Version   whereHelperint
	Size      whereHelperint64
	Color     whereHelperstring
	Type      whereHelperstring
	JoinID    whereHelperstring
	InJoin    whereHelperbool
}{
	ID:        whereHelperstring{field: "\"cables\".\"id\""},
	ProjectID: whereHelperint64{field: "\"cables\".\"project_id\""},
	Model:     whereHelperint{field: "\"cables\".\"model\""},
	Location:  whereHelperstring{field: "\"cables\".\"location\""},
	CreatedAt: whereHelpertime_Time{field: "\"cables\".\"created_at\""},
	CreatedBy: whereHelperint64{field: "\"cables\".\"created_by\""},
	Length:    whereHelperint64{field: "\"cables\".\"length\""},
	Weight:    whereHelperfloat32{field: "\"cables\".\"weight\""},
	Version:   whereHelperint{field: "\"cables\".\"version\""},
	Size:      whereHelperint64{field: "\"cables\".\"size\""},
	Color:     whereHelperstring{field: "\"cables\".\"color\""},
	Type:      whereHelperstring{field: "\"cables\".\"type\""},
	JoinID:    whereHelperstring{field: "\"cables\".\"join_id\""},
	InJoin:    whereHelperbool{field: "\"cables\".\"in_join\""},
}

// CableRels is where relationship names are stored.
var CableRels = struct {
	CreatedByUser string
	Join          string
	Project       string
}{
	CreatedByUser: "CreatedByUser",
	Join:          "Join",
	Project:       "Project",
}

// cableR is where relationships are stored.
type cableR struct {
	CreatedByUser *User    `boil:"CreatedByUser" json:"CreatedByUser" toml:"CreatedByUser" yaml:"CreatedByUser"`
	Join          *Join    `boil:"Join" json:"Join" toml:"Join" yaml:"Join"`
	Project       *Project `boil:"Project" json:"Project" toml:"Project" yaml:"Project"`
}

// NewStruct creates a new relationship struct
func (*cableR) NewStruct() *cableR {
	return &cableR{}
}

func (r *cableR) GetCreatedByUser() *User {
	if r == nil {
		return nil
	}
	return r.CreatedByUser
}

func (r *cableR) GetJoin() *Join {
	if r == nil {
		return nil
	}
	return r.Join
}

func (r *cableR) GetProject() *Project {
	if r == nil {
		return nil
	}
	return r.Project
}

// cableL is where Load methods for each relationship are stored.
type cableL struct{}

var (
	cableAllColumns            = []string{"id", "project_id", "model", "location", "created_at", "created_by", "length", "weight", "version", "size", "color", "type", "join_id", "in_join"}
	cableColumnsWithoutDefault = []string{"id", "project_id"}
	cableColumnsWithDefault    = []string{"model", "location", "created_at", "created_by", "length", "weight", "version", "size", "color", "type", "join_id", "in_join"}
	cablePrimaryKeyColumns     = []string{"id"}
	cableGeneratedColumns      = []string{}
)

type (
	// CableSlice is an alias for a slice of pointers to Cable.
	// This should almost always be used instead of []Cable.
	CableSlice []*Cable
	// CableHook is the signature for custom Cable hook methods
	CableHook func(context.Context, boil.ContextExecutor, *Cable) error

	cableQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cableType                 = reflect.TypeOf(&Cable{})
	cableMapping              = queries.MakeStructMapping(cableType)
	cablePrimaryKeyMapping, _ = queries.BindMapping(cableType, cableMapping, cablePrimaryKeyColumns)
	cableInsertCacheMut       sync.RWMutex
	cableInsertCache          = make(map[string]insertCache)
	cableUpdateCacheMut       sync.RWMutex
	cableUpdateCache          = make(map[string]updateCache)
	cableUpsertCacheMut       sync.RWMutex
	cableUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cableAfterSelectHooks []CableHook

var cableBeforeInsertHooks []CableHook
var cableAfterInsertHooks []CableHook

var cableBeforeUpdateHooks []CableHook
var cableAfterUpdateHooks []CableHook

var cableBeforeDeleteHooks []CableHook
var cableAfterDeleteHooks []CableHook

var cableBeforeUpsertHooks []CableHook
var cableAfterUpsertHooks []CableHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Cable) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cableAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Cable) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cableBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Cable) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cableAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Cable) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cableBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Cable) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cableAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Cable) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cableBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Cable) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cableAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Cable) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cableBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Cable) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cableAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCableHook registers your hook function for all future operations.
func AddCableHook(hookPoint boil.HookPoint, cableHook CableHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		cableAfterSelectHooks = append(cableAfterSelectHooks, cableHook)
	case boil.BeforeInsertHook:
		cableBeforeInsertHooks = append(cableBeforeInsertHooks, cableHook)
	case boil.AfterInsertHook:
		cableAfterInsertHooks = append(cableAfterInsertHooks, cableHook)
	case boil.BeforeUpdateHook:
		cableBeforeUpdateHooks = append(cableBeforeUpdateHooks, cableHook)
	case boil.AfterUpdateHook:
		cableAfterUpdateHooks = append(cableAfterUpdateHooks, cableHook)
	case boil.BeforeDeleteHook:
		cableBeforeDeleteHooks = append(cableBeforeDeleteHooks, cableHook)
	case boil.AfterDeleteHook:
		cableAfterDeleteHooks = append(cableAfterDeleteHooks, cableHook)
	case boil.BeforeUpsertHook:
		cableBeforeUpsertHooks = append(cableBeforeUpsertHooks, cableHook)
	case boil.AfterUpsertHook:
		cableAfterUpsertHooks = append(cableAfterUpsertHooks, cableHook)
	}
}

// One returns a single cable record from the query.
func (q cableQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Cable, error) {
	o := &Cable{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cables")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Cable records from the query.
func (q cableQuery) All(ctx context.Context, exec boil.ContextExecutor) (CableSlice, error) {
	var o []*Cable

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Cable slice")
	}

	if len(cableAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Cable records in the query.
func (q cableQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cables rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cableQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cables exists")
	}

	return count > 0, nil
}

// CreatedByUser pointed to by the foreign key.
func (o *Cable) CreatedByUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CreatedBy),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Join pointed to by the foreign key.
func (o *Cable) Join(mods ...qm.QueryMod) joinQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.JoinID),
	}

	queryMods = append(queryMods, mods...)

	return Joins(queryMods...)
}

// Project pointed to by the foreign key.
func (o *Cable) Project(mods ...qm.QueryMod) projectQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProjectID),
	}

	queryMods = append(queryMods, mods...)

	return Projects(queryMods...)
}

// LoadCreatedByUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (cableL) LoadCreatedByUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCable interface{}, mods queries.Applicator) error {
	var slice []*Cable
	var object *Cable

	if singular {
		var ok bool
		object, ok = maybeCable.(*Cable)
		if !ok {
			object = new(Cable)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCable)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCable))
			}
		}
	} else {
		s, ok := maybeCable.(*[]*Cable)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCable)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCable))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &cableR{}
		}
		args = append(args, object.CreatedBy)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &cableR{}
			}

			for _, a := range args {
				if a == obj.CreatedBy {
					continue Outer
				}
			}

			args = append(args, obj.CreatedBy)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(cableAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CreatedByUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CreatedByCables = append(foreign.R.CreatedByCables, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CreatedBy == foreign.ID {
				local.R.CreatedByUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CreatedByCables = append(foreign.R.CreatedByCables, local)
				break
			}
		}
	}

	return nil
}

// LoadJoin allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (cableL) LoadJoin(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCable interface{}, mods queries.Applicator) error {
	var slice []*Cable
	var object *Cable

	if singular {
		var ok bool
		object, ok = maybeCable.(*Cable)
		if !ok {
			object = new(Cable)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCable)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCable))
			}
		}
	} else {
		s, ok := maybeCable.(*[]*Cable)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCable)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCable))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &cableR{}
		}
		args = append(args, object.JoinID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &cableR{}
			}

			for _, a := range args {
				if a == obj.JoinID {
					continue Outer
				}
			}

			args = append(args, obj.JoinID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`joins`),
		qm.WhereIn(`joins.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Join")
	}

	var resultSlice []*Join
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Join")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for joins")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for joins")
	}

	if len(cableAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Join = foreign
		if foreign.R == nil {
			foreign.R = &joinR{}
		}
		foreign.R.Cables = append(foreign.R.Cables, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.JoinID == foreign.ID {
				local.R.Join = foreign
				if foreign.R == nil {
					foreign.R = &joinR{}
				}
				foreign.R.Cables = append(foreign.R.Cables, local)
				break
			}
		}
	}

	return nil
}

// LoadProject allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (cableL) LoadProject(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCable interface{}, mods queries.Applicator) error {
	var slice []*Cable
	var object *Cable

	if singular {
		var ok bool
		object, ok = maybeCable.(*Cable)
		if !ok {
			object = new(Cable)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCable)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCable))
			}
		}
	} else {
		s, ok := maybeCable.(*[]*Cable)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCable)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCable))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &cableR{}
		}
		args = append(args, object.ProjectID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &cableR{}
			}

			for _, a := range args {
				if a == obj.ProjectID {
					continue Outer
				}
			}

			args = append(args, obj.ProjectID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`projects`),
		qm.WhereIn(`projects.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Project")
	}

	var resultSlice []*Project
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Project")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for projects")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for projects")
	}

	if len(cableAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Project = foreign
		if foreign.R == nil {
			foreign.R = &projectR{}
		}
		foreign.R.Cables = append(foreign.R.Cables, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProjectID == foreign.ID {
				local.R.Project = foreign
				if foreign.R == nil {
					foreign.R = &projectR{}
				}
				foreign.R.Cables = append(foreign.R.Cables, local)
				break
			}
		}
	}

	return nil
}

// SetCreatedByUser of the cable to the related item.
// Sets o.R.CreatedByUser to related.
// Adds o to related.R.CreatedByCables.
func (o *Cable) SetCreatedByUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"cables\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"created_by"}),
		strmangle.WhereClause("\"", "\"", 2, cablePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CreatedBy = related.ID
	if o.R == nil {
		o.R = &cableR{
			CreatedByUser: related,
		}
	} else {
		o.R.CreatedByUser = related
	}

	if related.R == nil {
		related.R = &userR{
			CreatedByCables: CableSlice{o},
		}
	} else {
		related.R.CreatedByCables = append(related.R.CreatedByCables, o)
	}

	return nil
}

// SetJoin of the cable to the related item.
// Sets o.R.Join to related.
// Adds o to related.R.Cables.
func (o *Cable) SetJoin(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Join) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"cables\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"join_id"}),
		strmangle.WhereClause("\"", "\"", 2, cablePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.JoinID = related.ID
	if o.R == nil {
		o.R = &cableR{
			Join: related,
		}
	} else {
		o.R.Join = related
	}

	if related.R == nil {
		related.R = &joinR{
			Cables: CableSlice{o},
		}
	} else {
		related.R.Cables = append(related.R.Cables, o)
	}

	return nil
}

// SetProject of the cable to the related item.
// Sets o.R.Project to related.
// Adds o to related.R.Cables.
func (o *Cable) SetProject(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Project) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"cables\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"project_id"}),
		strmangle.WhereClause("\"", "\"", 2, cablePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProjectID = related.ID
	if o.R == nil {
		o.R = &cableR{
			Project: related,
		}
	} else {
		o.R.Project = related
	}

	if related.R == nil {
		related.R = &projectR{
			Cables: CableSlice{o},
		}
	} else {
		related.R.Cables = append(related.R.Cables, o)
	}

	return nil
}

// Cables retrieves all the records using an executor.
func Cables(mods ...qm.QueryMod) cableQuery {
	mods = append(mods, qm.From("\"cables\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"cables\".*"})
	}

	return cableQuery{q}
}

// FindCable retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCable(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Cable, error) {
	cableObj := &Cable{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"cables\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, cableObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cables")
	}

	if err = cableObj.doAfterSelectHooks(ctx, exec); err != nil {
		return cableObj, err
	}

	return cableObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Cable) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cables provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cableColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cableInsertCacheMut.RLock()
	cache, cached := cableInsertCache[key]
	cableInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cableAllColumns,
			cableColumnsWithDefault,
			cableColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cableType, cableMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cableType, cableMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"cables\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"cables\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cables")
	}

	if !cached {
		cableInsertCacheMut.Lock()
		cableInsertCache[key] = cache
		cableInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Cable.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Cable) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cableUpdateCacheMut.RLock()
	cache, cached := cableUpdateCache[key]
	cableUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cableAllColumns,
			cablePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cables, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"cables\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, cablePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cableType, cableMapping, append(wl, cablePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cables row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cables")
	}

	if !cached {
		cableUpdateCacheMut.Lock()
		cableUpdateCache[key] = cache
		cableUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cableQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cables")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cables")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CableSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cablePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"cables\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, cablePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cable slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cable")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Cable) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cables provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cableColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cableUpsertCacheMut.RLock()
	cache, cached := cableUpsertCache[key]
	cableUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cableAllColumns,
			cableColumnsWithDefault,
			cableColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			cableAllColumns,
			cablePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert cables, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(cablePrimaryKeyColumns))
			copy(conflict, cablePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"cables\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(cableType, cableMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cableType, cableMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert cables")
	}

	if !cached {
		cableUpsertCacheMut.Lock()
		cableUpsertCache[key] = cache
		cableUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Cable record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Cable) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Cable provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cablePrimaryKeyMapping)
	sql := "DELETE FROM \"cables\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cables")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cables")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cableQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cableQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cables")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cables")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CableSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cableBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cablePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"cables\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, cablePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cable slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cables")
	}

	if len(cableAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Cable) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCable(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CableSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CableSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cablePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"cables\".* FROM \"cables\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, cablePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CableSlice")
	}

	*o = slice

	return nil
}

// CableExists checks if the Cable row exists.
func CableExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"cables\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cables exists")
	}

	return exists, nil
}
