//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { catchError as _observableCatch, mergeMap as _observableMergeMap } from 'rxjs/operators'
import { Observable, of as _observableOf, throwError as _observableThrow } from 'rxjs'
import { Inject, Injectable, InjectionToken, Optional } from '@angular/core'
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http'

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL')

@Injectable()
export class AuthService {
  private http: HttpClient
  private baseUrl: string
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : ''
  }

  /**
   * @return Success
   */
  identityAPIEndpointsAdminCreateManyUsersEndpoint(createManyUsersRequest: IdentityAPIEndpointsAdminCreateManyUsersRequest): Observable<IdentityAPIEndpointsAdminCreateManyUsersResponse> {
    let url_ = this.baseUrl + '/admin/users/create-many'
    url_ = url_.replace(/[?&]$/, '')

    const content_ = JSON.stringify(createManyUsersRequest)

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      }),
    }

    return this.http.request('post', url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processIdentityAPIEndpointsAdminCreateManyUsersEndpoint(response_)
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processIdentityAPIEndpointsAdminCreateManyUsersEndpoint(response_ as any)
        } catch (e) {
          return _observableThrow(e) as any as Observable<IdentityAPIEndpointsAdminCreateManyUsersResponse>
        }
      } else
        return _observableThrow(response_) as any as Observable<IdentityAPIEndpointsAdminCreateManyUsersResponse>
    }))
  }

  protected processIdentityAPIEndpointsAdminCreateManyUsersEndpoint(response: HttpResponseBase): Observable<IdentityAPIEndpointsAdminCreateManyUsersResponse> {
    const status = response.status
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined

    let _headers: any = {}
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key)
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null
        result200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver) as IdentityAPIEndpointsAdminCreateManyUsersResponse
        return _observableOf(result200)
      }))
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException('An unexpected server error occurred.', status, _responseText, _headers)
      }))
    }
    return _observableOf<IdentityAPIEndpointsAdminCreateManyUsersResponse>(null as any)
  }

  /**
   * @return Success
   */
  identityAPIEndpointsAdminDownloadImageByUrlEndpoint(downloadImageByUrlRequest: IdentityAPIEndpointsAdminDownloadImageByUrlRequest): Observable<IdentityAPIEndpointsAdminDownloadImageByUrlResponse> {
    let url_ = this.baseUrl + '/admin/images/download'
    url_ = url_.replace(/[?&]$/, '')

    const content_ = JSON.stringify(downloadImageByUrlRequest)

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      }),
    }

    return this.http.request('post', url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processIdentityAPIEndpointsAdminDownloadImageByUrlEndpoint(response_)
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processIdentityAPIEndpointsAdminDownloadImageByUrlEndpoint(response_ as any)
        } catch (e) {
          return _observableThrow(e) as any as Observable<IdentityAPIEndpointsAdminDownloadImageByUrlResponse>
        }
      } else
        return _observableThrow(response_) as any as Observable<IdentityAPIEndpointsAdminDownloadImageByUrlResponse>
    }))
  }

  protected processIdentityAPIEndpointsAdminDownloadImageByUrlEndpoint(response: HttpResponseBase): Observable<IdentityAPIEndpointsAdminDownloadImageByUrlResponse> {
    const status = response.status
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined

    let _headers: any = {}
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key)
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null
        result200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver) as IdentityAPIEndpointsAdminDownloadImageByUrlResponse
        return _observableOf(result200)
      }))
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException('An unexpected server error occurred.', status, _responseText, _headers)
      }))
    }
    return _observableOf<IdentityAPIEndpointsAdminDownloadImageByUrlResponse>(null as any)
  }

  /**
   * @return Success
   */
  identityAPIEndpointsAuthAuthorizeEndpoint(): Observable<IdentityContractsResponsesAuthorizeResponse> {
    let url_ = this.baseUrl + '/authorize'
    url_ = url_.replace(/[?&]$/, '')

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Accept': 'application/json',
      }),
    }

    return this.http.request('post', url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processIdentityAPIEndpointsAuthAuthorizeEndpoint(response_)
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processIdentityAPIEndpointsAuthAuthorizeEndpoint(response_ as any)
        } catch (e) {
          return _observableThrow(e) as any as Observable<IdentityContractsResponsesAuthorizeResponse>
        }
      } else
        return _observableThrow(response_) as any as Observable<IdentityContractsResponsesAuthorizeResponse>
    }))
  }

  protected processIdentityAPIEndpointsAuthAuthorizeEndpoint(response: HttpResponseBase): Observable<IdentityContractsResponsesAuthorizeResponse> {
    const status = response.status
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined

    let _headers: any = {}
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key)
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null
        result200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver) as IdentityContractsResponsesAuthorizeResponse
        return _observableOf(result200)
      }))
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException('An unexpected server error occurred.', status, _responseText, _headers)
      }))
    }
    return _observableOf<IdentityContractsResponsesAuthorizeResponse>(null as any)
  }

  /**
   * @return Success
   */
  identityAPIEndpointsAuthIsReturningUserEndpoint(): Observable<IdentityContractsResponsesAuthorizeResponse> {
    let url_ = this.baseUrl + '/returning-user'
    url_ = url_.replace(/[?&]$/, '')

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Accept': 'application/json',
      }),
    }

    return this.http.request('post', url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processIdentityAPIEndpointsAuthIsReturningUserEndpoint(response_)
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processIdentityAPIEndpointsAuthIsReturningUserEndpoint(response_ as any)
        } catch (e) {
          return _observableThrow(e) as any as Observable<IdentityContractsResponsesAuthorizeResponse>
        }
      } else
        return _observableThrow(response_) as any as Observable<IdentityContractsResponsesAuthorizeResponse>
    }))
  }

  protected processIdentityAPIEndpointsAuthIsReturningUserEndpoint(response: HttpResponseBase): Observable<IdentityContractsResponsesAuthorizeResponse> {
    const status = response.status
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined

    let _headers: any = {}
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key)
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null
        result200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver) as IdentityContractsResponsesAuthorizeResponse
        return _observableOf(result200)
      }))
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException('An unexpected server error occurred.', status, _responseText, _headers)
      }))
    }
    return _observableOf<IdentityContractsResponsesAuthorizeResponse>(null as any)
  }

  /**
   * @return Success
   */
  identityAPIEndpointsPingEndpoint(): Observable<EventBusDomainAppUserEventsAppUserEvent> {
    let url_ = this.baseUrl + '/ping'
    url_ = url_.replace(/[?&]$/, '')

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Accept': 'application/json',
      }),
    }

    return this.http.request('post', url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processIdentityAPIEndpointsPingEndpoint(response_)
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processIdentityAPIEndpointsPingEndpoint(response_ as any)
        } catch (e) {
          return _observableThrow(e) as any as Observable<EventBusDomainAppUserEventsAppUserEvent>
        }
      } else
        return _observableThrow(response_) as any as Observable<EventBusDomainAppUserEventsAppUserEvent>
    }))
  }

  protected processIdentityAPIEndpointsPingEndpoint(response: HttpResponseBase): Observable<EventBusDomainAppUserEventsAppUserEvent> {
    const status = response.status
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined

    let _headers: any = {}
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key)
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null
        result200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver) as EventBusDomainAppUserEventsAppUserEvent
        return _observableOf(result200)
      }))
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException('An unexpected server error occurred.', status, _responseText, _headers)
      }))
    }
    return _observableOf<EventBusDomainAppUserEventsAppUserEvent>(null as any)
  }

  /**
   * @return Success
   */
  identityAPIEndpointsUserEndpoint(): Observable<IdentityContractsResponsesUserResponse> {
    let url_ = this.baseUrl + '/user'
    url_ = url_.replace(/[?&]$/, '')

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Accept': 'application/json',
      }),
    }

    return this.http.request('get', url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processIdentityAPIEndpointsUserEndpoint(response_)
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processIdentityAPIEndpointsUserEndpoint(response_ as any)
        } catch (e) {
          return _observableThrow(e) as any as Observable<IdentityContractsResponsesUserResponse>
        }
      } else
        return _observableThrow(response_) as any as Observable<IdentityContractsResponsesUserResponse>
    }))
  }

  protected processIdentityAPIEndpointsUserEndpoint(response: HttpResponseBase): Observable<IdentityContractsResponsesUserResponse> {
    const status = response.status
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined

    let _headers: any = {}
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key)
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null
        result200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver) as IdentityContractsResponsesUserResponse
        return _observableOf(result200)
      }))
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException('An unexpected server error occurred.', status, _responseText, _headers)
      }))
    }
    return _observableOf<IdentityContractsResponsesUserResponse>(null as any)
  }

  getLoad(guid: string | null): Observable<void> {
    let url_ = this.baseUrl + '/load/{guid}'
    if (guid === undefined || guid === null)
      throw new Error('The parameter \'guid\' must be defined.')
    url_ = url_.replace('{guid}', encodeURIComponent('' + guid))
    url_ = url_.replace(/[?&]$/, '')

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({}),
    }

    return this.http.request('get', url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processGetLoad(response_)
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetLoad(response_ as any)
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>
        }
      } else
        return _observableThrow(response_) as any as Observable<void>
    }))
  }

  protected processGetLoad(response: HttpResponseBase): Observable<void> {
    const status = response.status
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined

    let _headers: any = {}
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key)
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return _observableOf<void>(null as any)
      }))
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException('An unexpected server error occurred.', status, _responseText, _headers)
      }))
    }
    return _observableOf<void>(null as any)
  }

  getList(): Observable<IdentityContractsDataCurrentUserDto[]> {
    let url_ = this.baseUrl + '/list'
    url_ = url_.replace(/[?&]$/, '')

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Accept': 'application/json',
      }),
    }

    return this.http.request('get', url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processGetList(response_)
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetList(response_ as any)
        } catch (e) {
          return _observableThrow(e) as any as Observable<IdentityContractsDataCurrentUserDto[]>
        }
      } else
        return _observableThrow(response_) as any as Observable<IdentityContractsDataCurrentUserDto[]>
    }))
  }

  protected processGetList(response: HttpResponseBase): Observable<IdentityContractsDataCurrentUserDto[]> {
    const status = response.status
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined

    let _headers: any = {}
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key)
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null
        result200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver) as IdentityContractsDataCurrentUserDto[]
        return _observableOf(result200)
      }))
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException('An unexpected server error occurred.', status, _responseText, _headers)
      }))
    }
    return _observableOf<IdentityContractsDataCurrentUserDto[]>()
    // return _observableOf<IdentityContractsDataCurrentUserDto[]>(null as any)
  }

  getCreate(): Observable<void> {
    let url_ = this.baseUrl + '/create'
    url_ = url_.replace(/[?&]$/, '')

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({}),
    }

    return this.http.request('get', url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processGetCreate(response_)
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetCreate(response_ as any)
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>
        }
      } else
        return _observableThrow(response_) as any as Observable<void>
    }))
  }

  protected processGetCreate(response: HttpResponseBase): Observable<void> {
    const status = response.status
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined

    let _headers: any = {}
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key)
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return _observableOf<void>(null as any)
      }))
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException('An unexpected server error occurred.', status, _responseText, _headers)
      }))
    }
    return _observableOf<void>(null as any)
  }

  getLoginGithub(): Observable<void> {
    let url_ = this.baseUrl + '/login/github'
    url_ = url_.replace(/[?&]$/, '')

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({}),
    }

    return this.http.request('get', url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processGetLoginGithub(response_)
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetLoginGithub(response_ as any)
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>
        }
      } else
        return _observableThrow(response_) as any as Observable<void>
    }))
  }

  protected processGetLoginGithub(response: HttpResponseBase): Observable<void> {
    const status = response.status
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined

    let _headers: any = {}
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key)
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return _observableOf<void>(null as any)
      }))
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException('An unexpected server error occurred.', status, _responseText, _headers)
      }))
    }
    return _observableOf<void>(null as any)
  }

  getLoginGoogle(): Observable<void> {
    let url_ = this.baseUrl + '/login/google'
    url_ = url_.replace(/[?&]$/, '')

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({}),
    }

    return this.http.request('get', url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processGetLoginGoogle(response_)
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetLoginGoogle(response_ as any)
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>
        }
      } else
        return _observableThrow(response_) as any as Observable<void>
    }))
  }

  protected processGetLoginGoogle(response: HttpResponseBase): Observable<void> {
    const status = response.status
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined

    let _headers: any = {}
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key)
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return _observableOf<void>(null as any)
      }))
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException('An unexpected server error occurred.', status, _responseText, _headers)
      }))
    }
    return _observableOf<void>(null as any)
  }
}

export interface IdentityAPIEndpointsAdminCreateManyUsersResponse {
  users?: IdentityContractsDataCurrentUserDto[];
}

export interface IdentityContractsDataCurrentUserDto {
  id?: string;
  displayName?: string;
  userName?: string;
  firstName?: string;
  lastName?: string;
  photoUrl?: string;
}

export interface IdentityAPIEndpointsAdminCreateManyUsersRequest {
  count?: number;
}

export interface IdentityAPIEndpointsAdminDownloadImageByUrlResponse {
  imageUrl?: string;
}

export interface IdentityAPIEndpointsAdminDownloadImageByUrlRequest {
  imageUrl?: string;
}

export interface IdentityContractsResponsesAuthorizeResponse {
  user?: IdentityContractsDataCurrentUserDto;
  token?: string;
}

export interface EventBusDomainAppUserEventsAppUserEvent {
  appUserEventType?: EventBusDomainAppUserEventsAppUserEventType;
  user?: InfrastructureContractsDataUserDto;
  eventType?: string;
  createdAt?: Date;
  queues?: string[];
}

/** A base type to use for creating smart enums. */
export interface ArdalisSmartEnumSmartEnumOfAppUserEventTypeAndInt32 {
  /** Gets the name. */
  name?: string | undefined;
  /** Gets the value. */
  value?: number;
}

/** A base type to use for creating smart enums with inner value of type Int32. */
export interface ArdalisSmartEnumSmartEnumOfAppUserEventType extends ArdalisSmartEnumSmartEnumOfAppUserEventTypeAndInt32 {
}

export interface EventBusDomainAppUserEventsAppUserEventType extends ArdalisSmartEnumSmartEnumOfAppUserEventType {
}

export interface InfrastructureContractsDataUserDto {
  id?: string;
  firstName?: string;
  lastName?: string;
  displayName?: string;
  photoUrl?: string;
  createdTime?: Date;
  lastModifiedTime?: Date;
}

export interface IdentityContractsResponsesUserResponse {
  user?: IdentityContractsDataCurrentUserDto;
}

export class ApiException extends Error {
  override message: string
  status: number
  response: string
  headers: { [key: string]: any; }
  result: any

  constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
    super()

    this.message = message
    this.status = status
    this.response = response
    this.headers = headers
    this.result = result
  }

  protected isApiException = true

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true
  }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
  if (result !== null && result !== undefined)
    return _observableThrow(result)
  else
    return _observableThrow(new ApiException(message, status, response, headers, null))
}

function blobToText(blob: any): Observable<string> {
  return new Observable<string>((observer: any) => {
    if (!blob) {
      observer.next('')
      observer.complete()
    } else {
      let reader = new FileReader()
      reader.onload = event => {
        observer.next((event.target as any).result)
        observer.complete()
      }
      reader.readAsText(blob)
    }
  })
}

