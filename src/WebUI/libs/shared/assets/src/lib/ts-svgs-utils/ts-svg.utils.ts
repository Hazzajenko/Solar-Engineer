/* ðŸ¤– this file was generated by svg-to-ts */

import * as SVG_CONST from '../ts-svgs/index'
import { AppSvgWrapper } from '../ts-svgs'

// AppSvg.bell
export const TS_SVG = SVG_CONST

/*export type AppSvg =
 | 'arrow_uturn_left'
 | 'arrow_uturn_right'
 | 'bars_arrow_up'
 | 'bell_slash'
 | 'bell'
 | 'chat_bubble_left'
 | 'edit'
 | 'ellipsis_vertical'
 | 'folder_open'
 | 'folder_plus'
 | 'folder'
 | 'link'
 | 'paint_brush'
 | 'pencil_square'
 | 'trash'
 | 'user_circle'
 | 'user_minus'
 | 'user_plus'
 | 'users'
 | 'wrench'

 export interface AppSvgWrapper {
 name: AppSvg
 data: string
 }*/

export type SvgConstType = (typeof SVG_CONST)[keyof typeof SVG_CONST]

// export type AppSvgKey = Pick<keyof typeof SVG_CONST, >
export type AppSvgKey = keyof typeof SVG_CONST
export const APP_SVG_KEY = Object.keys(SVG_CONST) as AppSvgKey[]

export const APP_SVG_KEY_OBJ = APP_SVG_KEY.reduce((obj, key) => {
	return {
		...obj,
		[key]: key,
	}
}, {} as Record<AppSvgKey, AppSvgKey>)

export const APP_SVG: AppSvgWrapper[] = APP_SVG_KEY.map((key) => {
	return {
		name: SVG_CONST[key].name,
		data: SVG_CONST[key].data,
	} as AppSvgWrapper
})

export const getSvgWrapperByKey = (key: AppSvgKey): AppSvgWrapper => {
	return {
		name: SVG_CONST[key].name,
		data: SVG_CONST[key].data,
	} as AppSvgWrapper
}

export const getSvgByKey = (key: AppSvgKey): string => {
	return SVG_CONST[key].data
}
